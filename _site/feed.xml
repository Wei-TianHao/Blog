<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/blog/" rel="alternate" type="text/html" /><updated>2021-05-21T01:27:16-04:00</updated><id>http://localhost:4000/blog/feed.xml</id><title type="html">TH的小声bbox</title><subtitle>Document my learning notes.</subtitle><author><name>Tianhao Wei</name></author><entry><title type="html">高斯过程回归科普</title><link href="http://localhost:4000/blog/2019/09/23/gaussian-process.html" rel="alternate" type="text/html" title="高斯过程回归科普" /><published>2019-09-23T22:00:00-04:00</published><updated>2019-09-23T22:00:00-04:00</updated><id>http://localhost:4000/blog/2019/09/23/gaussian-process</id><content type="html" xml:base="http://localhost:4000/blog/2019/09/23/gaussian-process.html">&lt;blockquote&gt;
  &lt;p&gt;高斯过程最关键的思想就是，你不想要什么变量，就对这个变量做高斯分布假设…然后就可以计算关于这个变量的边缘分布，把这个变量消掉，建立起其他变量之间的直接联系。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;简介&quot;&gt;简介&lt;/h3&gt;

&lt;p&gt;高斯过程回归是一类贝叶斯非参方法，解决的问题是给定一堆数据点&lt;script type=&quot;math/tex&quot;&gt;(x,y)&lt;/script&gt;后，如何寻找拟合数据最好的函数，同时给出函数的分布，类似于置信区间。&lt;/p&gt;

&lt;p&gt;为了引入高斯过程回归，我们先讲一下参数方法，贝叶斯线性回归。&lt;/p&gt;

&lt;h3 id=&quot;贝叶斯线性回归&quot;&gt;贝叶斯线性回归&lt;/h3&gt;

&lt;p&gt;假设我们现在有一堆数据点&lt;script type=&quot;math/tex&quot;&gt;S=(x,y)&lt;/script&gt;，数据的分布满足
&lt;script type=&quot;math/tex&quot;&gt;y=f(x)+\epsilon,\ \epsilon \sim N(0,\sigma^2)&lt;/script&gt;
其中我们假设&lt;script type=&quot;math/tex&quot;&gt;f(x)=w^T x&lt;/script&gt;，即线性模型，&lt;script type=&quot;math/tex&quot;&gt;\epsilon&lt;/script&gt;是观测噪音。&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;我们现在的目标是求一个最好的&lt;script type=&quot;math/tex&quot;&gt;w&lt;/script&gt;使得&lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt;尽量好的拟合这些数据点。一个可行的想法是：如果我们知道给定&lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt;以后&lt;script type=&quot;math/tex&quot;&gt;w&lt;/script&gt;的概率分布，那我们就能轻易选出最好的&lt;script type=&quot;math/tex&quot;&gt;w&lt;/script&gt;了。即我们的目标是求&lt;script type=&quot;math/tex&quot;&gt;w&lt;/script&gt;的后验概率分布$$p(w&lt;/td&gt;
      &lt;td&gt;S)$$。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;但这个没法直接求，因为逻辑上来说&lt;script type=&quot;math/tex&quot;&gt;w&lt;/script&gt;并不取决于你的数据集是什么。所以我们想能不能利用贝叶斯方法，用&lt;script type=&quot;math/tex&quot;&gt;p(w)&lt;/script&gt;和$$p(S&lt;/td&gt;
      &lt;td&gt;w)$$来求？&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;p(w)&lt;/script&gt;可以由我们指定，因为求后验概率的过程就是根据观察调整一个概率分布超参数的过程。我们用&lt;script type=&quot;math/tex&quot;&gt;p(w) \sim N(0,\tau^2 I)&lt;/script&gt;，使用高斯分布的原因待会会解释，均值设为&lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt;是因为我们其实并不知道&lt;script type=&quot;math/tex&quot;&gt;w&lt;/script&gt;的分布是怎样的，所以应该尽量少的引入先验知识，而&lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt;是最无偏的估计。&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;而$$p(S&lt;/td&gt;
      &lt;td&gt;w)&lt;script type=&quot;math/tex&quot;&gt;其实就是&lt;/script&gt;p(y&lt;/td&gt;
      &lt;td&gt;x,w)&lt;script type=&quot;math/tex&quot;&gt;，这两个是完全等价的，因为&lt;/script&gt;(x,y)&lt;script type=&quot;math/tex&quot;&gt;是一起给定的，&lt;/script&gt;p(y&lt;/td&gt;
      &lt;td&gt;x)=1$$&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;现在我们知道了&lt;script type=&quot;math/tex&quot;&gt;p(S|w)&lt;/script&gt;和&lt;script type=&quot;math/tex&quot;&gt;p(w)&lt;/script&gt;，用贝叶斯公式求&lt;script type=&quot;math/tex&quot;&gt;p(w|S)&lt;/script&gt;
&lt;script type=&quot;math/tex&quot;&gt;p(w|S) = \frac{p(S|w)\ p(w)}{p(S)}\\
p(S)=\int p(w)\ p(S|w)\ dw&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;这样我们就能选出最适用于当前数据&lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt;和模型&lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt;的参数&lt;script type=&quot;math/tex&quot;&gt;w&lt;/script&gt;啦！假设我们的测试集是&lt;script type=&quot;math/tex&quot;&gt;(x^*,y^*)&lt;/script&gt;，把&lt;script type=&quot;math/tex&quot;&gt;w&lt;/script&gt;带进去就可以对&lt;script type=&quot;math/tex&quot;&gt;x^*&lt;/script&gt;进行预测。&lt;/p&gt;

&lt;p&gt;但贝叶斯方法有个额外的好处，就是不光能给出预测，还能给出预测的分布，即
&lt;script type=&quot;math/tex&quot;&gt;p(y^*|S,x^*) = \int p(y^*|x^*,w)\ p(w|S)\ dw&lt;/script&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;一般来说上面两个积分都很不好求，但因为我们的假设分布都是高斯分布，一通很复杂的推导之后我们会发现最后$$w&lt;/td&gt;
      &lt;td&gt;S&lt;script type=&quot;math/tex&quot;&gt;和&lt;/script&gt;y^*&lt;/td&gt;
      &lt;td&gt;S,x^*$$都是高斯分布。这就是我们之前为什么全都要假设成高斯分布的原因。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;高斯过程&quot;&gt;高斯过程&lt;/h3&gt;
&lt;p&gt;上面的方法计算的是某个具体模型的&lt;strong&gt;&lt;em&gt;参数的概率分布&lt;/em&gt;&lt;/strong&gt;，而高斯过程直接计算所有&lt;strong&gt;&lt;em&gt;模型的概率分布&lt;/em&gt;&lt;/strong&gt;。因为不管用什么模型，我们总是对于模型有一些假设，这些假设如果符合现实会有很大的帮助，但如果不准（一般都很不准…），则会带来很大的损害。所以我们想能不能直接让算法自己选择模型，即算出模型的概率分布呢？&lt;/p&gt;

&lt;p&gt;那怎么才能计算模型的概率分布呢？我们知道函数可以被看做是一个无穷维的向量，我们可以假设每一维（即x上每个点）都是一个随机变量，每个随机变量都符合高斯分布，他们联合起来符合多元高斯分布（无限元高斯分布），即这个函数符合一个多元高斯分布。我们每次观测完，就可以通过最大后验概率调整这个多元高斯分布的参数。观测足够多，就可以得到接近真实的模型概率分布。&lt;/p&gt;

&lt;p&gt;这样的话我们要给出一个无穷维的均值向量（一个均值函数）&lt;script type=&quot;math/tex&quot;&gt;\mu&lt;/script&gt;和无穷维的协方差矩阵&lt;script type=&quot;math/tex&quot;&gt;\sigma&lt;/script&gt;。对于均值函数，我们可以简单粗暴的设成衡为&lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt;，原因跟之前一样，在没有信息的情况下尽量无偏；无穷维向量我们可以用恒为零的函数，可无穷维的矩阵可怎么办呢？解决方案是，我们假设两个变量的关联程度只跟他们之间的“距离”有关，越近越相关，跟其他的东西都没有关系。设衡量距离的函数为&lt;script type=&quot;math/tex&quot;&gt;k(x_i,x_j)&lt;/script&gt;，则协方差中的&lt;script type=&quot;math/tex&quot;&gt;(i,j)&lt;/script&gt;项为&lt;script type=&quot;math/tex&quot;&gt;k(x_i,x_j)&lt;/script&gt;。给定这些先验后，我们可以说&lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt;服从这样一个高斯过程:
&lt;script type=&quot;math/tex&quot;&gt;f(.) \sim GP(0,k(.,.))&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;但是协方差矩阵不是随便拿数凑一个矩阵就行的，它必须是个半正定的矩阵才行，那&lt;script type=&quot;math/tex&quot;&gt;k(.,.)&lt;/script&gt;得满足什么条件才能让协方差一定是半正定矩阵呢？答案就是&lt;script type=&quot;math/tex&quot;&gt;k(.,.)&lt;/script&gt;必须得是核函数。其实根据Mercer’s theorem，核函数的定义就是使得组成的矩阵为半正定矩阵的函数。所以，&lt;script type=&quot;math/tex&quot;&gt;k(.,.)&lt;/script&gt;是核函数和协方差矩阵半正定互为充要条件。我们这里就不讨论怎么构造核函数了。&lt;/p&gt;

&lt;p&gt;这里我们虽然没有假设模型是什么样的，只是给了一个核的先验，但核的先验其实还是隐性的限制了模型的性质。就是说高斯过程也无法探索所有可能的函数形式，只能探索部分一类满足某种条件的函数。但这种限制相比于我们预设模型满足什么形式已经弱多了，因此高斯过程相比于基于参数的方法具有更大的探索空间来寻找最合适的函数。&lt;/p&gt;

&lt;p&gt;接下来讲一下实践中怎么用。&lt;/p&gt;

&lt;p&gt;实践中要做的就是通过采样，调整模型分布的后验概率，
虽然我们假设了一个无穷维的分布，但在现实中我们的训练数据不是无穷维的，即不可能函数上每个点都采样。我们只有部分变量的采样情况，我们假设有个训练集&lt;script type=&quot;math/tex&quot;&gt;(X,\bf{y})&lt;/script&gt;，和测试集&lt;script type=&quot;math/tex&quot;&gt;(X_*,\bf{y_*})&lt;/script&gt;。&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;因为&lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt;是无穷维的，把&lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt;的后验分布表示出来既困难又没有必要，我们想要其实只是测试集上预测的分布，即$$p(\vec{y}_{*}&lt;/td&gt;
      &lt;td&gt;\vec{y}, X, X_{*})$$，我们可以直接求这个。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;y=f(x)+\varepsilon,\ \varepsilon \sim N(0,\sigma^2)&lt;/script&gt;
设&lt;script type=&quot;math/tex&quot;&gt;\vec{f}, \vec{f^*}&lt;/script&gt;代表&lt;script type=&quot;math/tex&quot;&gt;f(.)&lt;/script&gt;在&lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;,&lt;script type=&quot;math/tex&quot;&gt;X^*&lt;/script&gt;上的输出组成的向量。
&lt;script type=&quot;math/tex&quot;&gt;\vec{\varepsilon},\vec{\varepsilon^*}&lt;/script&gt;是噪音在两个数据集上组成的向量。&lt;/p&gt;

&lt;p&gt;则有
&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\left[\begin{array}{c}{\vec{f}} \\ {\vec{f}_{*}}\end{array}\right] \Bigr| X, X_{*} \sim N\left(\overrightarrow{0},\left[\begin{array}{cc}{K(X, X)} &amp; {K\left(X, X_{*}\right)} \\ {K\left(X_{*}, X\right)} &amp; {K\left(X_{*}, X_{*}\right)}\end{array}\right]\right) %]]&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
{\qquad\left[\begin{array}{c}{\vec{y}} \\ {\vec{y}_{*}}\end{array}\right] | X, X_{*}=\left[\begin{array}{c}{\vec{f}} \\ {\vec{f}_{*}}\end{array}\right]+\left[\begin{array}{c}{\vec{\varepsilon}} \\ {\vec{\varepsilon}_{*}}\end{array}\right] \sim \mathcal{N}\left(\overrightarrow{0},\left[\begin{array}{cc}{K(X, X)+\sigma^{2} I} &amp; {K\left(X, X_{*}\right)} \\ {K\left(X_{*}, X\right)} &amp; {K\left(X_{*}, X_{*}\right)+\sigma^{2} I}\end{array}\right]\right)} \\ %]]&gt;&lt;/script&gt;
我们现在知道了给定&lt;script type=&quot;math/tex&quot;&gt;X, X_*&lt;/script&gt;的时候&lt;script type=&quot;math/tex&quot;&gt;y, y_*&lt;/script&gt;的概率分布&lt;script type=&quot;math/tex&quot;&gt;p(\vec{y}, \vec{y}_{*}\ | X, X_{*})&lt;/script&gt;，一个多元高斯分布。接下来我们想要算出上式的边缘分布，即&lt;script type=&quot;math/tex&quot;&gt;p(\vec{y}_{*} | \vec{y}, X, X_{*})&lt;/script&gt;。一般算边缘分布的时候是要求积分的，对上式来说就是求&lt;script type=&quot;math/tex&quot;&gt;p(\vec{y}, \vec{y}_{*}\ | X, X_{*})&lt;/script&gt;对&lt;script type=&quot;math/tex&quot;&gt;\vec{y}&lt;/script&gt;的积分。但高斯分布实在是太优秀了，我们经过推导以后发现多元高斯的边缘分布有解析解，可以直接写出来，而且还是一个多元高斯分布！推导很复杂，这里就不讲了，感兴趣的可以看一下&lt;a href=&quot;https://seanwangjs.github.io/2018/01/08/conditional-gaussian-distribution.html&quot;&gt;这篇博客&lt;/a&gt;。大家知道下式是套多元高斯分布的边缘分布公式得到的就行了，最后推出来的边缘分布是
&lt;script type=&quot;math/tex&quot;&gt;{\qquad \vec{y}_{*} | \vec{y}, X, X_{*} \sim \mathcal{N}\left(\mu^{*}, \Sigma^{*}\right)}&lt;/script&gt;
其中
&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
{\qquad \begin{aligned} \mu^{*} &amp;=K\left(X_{*}, X\right)\left(K(X, X)+\sigma^{2} I\right)^{-1} \vec{y} \\ \Sigma^{*} &amp;=K\left(X_{*}, X_{*}\right)+\sigma^{2} I-K\left(X_{*}, X\right)\left(K(X, X)+\sigma^{2} I\right)^{-1} K\left(X, X_{*}\right) \end{aligned}} %]]&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;这样我们就得到了测试集上预测的分布！&lt;script type=&quot;math/tex&quot;&gt;\mu^*&lt;/script&gt;就是我们用后验概率最大的模型在&lt;script type=&quot;math/tex&quot;&gt;X_*&lt;/script&gt;上预测出来的结果。&lt;/p&gt;

&lt;p&gt;另外提一点，最后的结果直接由输入和先验决定，没有出现任何参数，这也是高斯过程被称为非参方法的原因。但其实我们也可以理解为非参方法实际上就是无穷参方法，因为函数的每一个点都是一个参数。或者我们把最终学到的结果看做是由训练数据作为参数的函数，训练数据越多，参数就越多。&lt;/p&gt;

&lt;h3 id=&quot;高斯过程隐变量模型&quot;&gt;高斯过程隐变量模型&lt;/h3&gt;

&lt;p&gt;高斯过程隐变量模型是一种降维的方法，这种方法假设低维到高维的映射满足一个线性模型，通过假设模型参数符合高斯分布，边缘化了模型中的参数，直接联系起了隐空间和观测空间。感兴趣的可以看一下&lt;a href=&quot;https://zhuanlan.zhihu.com/p/30969391&quot;&gt;这篇博客&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;高斯过程动态模型&quot;&gt;高斯过程动态模型&lt;/h3&gt;

&lt;p&gt;高斯过程动态模型就是把高斯过程隐变量模型用于非线性动态系统建模，同样是假设参数满足高斯分布，通过计算边缘分布消掉参数，建立起隐空间和观测空间的联系。&lt;/p&gt;</content><author><name>Tianhao Wei</name></author><category term="bayesian-methods" /><category term="machine-learning" /><summary type="html">高斯过程最关键的思想就是，你不想要什么变量，就对这个变量做高斯分布假设…然后就可以计算关于这个变量的边缘分布，把这个变量消掉，建立起其他变量之间的直接联系。</summary></entry><entry><title type="html">元学习: 学习如何学习【译】</title><link href="http://localhost:4000/blog/2019/09/16/meta-learning.html" rel="alternate" type="text/html" title="元学习: 学习如何学习【译】" /><published>2019-09-16T20:00:00-04:00</published><updated>2019-09-16T20:00:00-04:00</updated><id>http://localhost:4000/blog/2019/09/16/meta-learning</id><content type="html" xml:base="http://localhost:4000/blog/2019/09/16/meta-learning.html">&lt;blockquote&gt;
  &lt;p&gt;学习如何学习的方法被称为元学习。元学习的目标是在接触到没见过的任务或者迁移到新环境中时，可以根据之前的经验和少量的样本快速学习如何应对。元学习有三种常见的实现方法：1）学习有效的距离度量方式（基于度量的方法）；2）使用带有显式或隐式记忆储存的（循环）神经网络（基于模型的方法）；3）训练以快速学习为目标的模型（基于优化的方法）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;strong&gt;本文翻译自&lt;a href=&quot;https://lilianweng.github.io/lil-log/2018/11/30/meta-learning.html&quot;&gt;Lilian&lt;/a&gt;的英文博客，Lilian的博客质量非常高，向大家强烈安利~&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;好的机器学习模型经常需要大量的数据来进行训练，但人却恰恰相反。小孩子看过一两次喵喵和小鸟后就能分辨出他们的区别。会骑自行车的人很快就能学会骑摩托车，有时候甚至不用人教。那么有没有可能让机器学习模型也具有相似的性质呢？如何才能让模型仅仅用少量的数据就学会新的概念和技能呢？这就是&lt;strong&gt;元学习&lt;/strong&gt;要解决的问题。&lt;/p&gt;

&lt;p&gt;我们期望好的元学习模型能够具备强大的适应能力和泛化能力。在测试时，模型会先经过一个自适应环节（adaptation process），即根据少量样本学习任务。经过自适应后，模型即可完成新的任务。自适应本质上来说就是一个短暂的学习过程，这就是为什么元学习也被称作&lt;a href=&quot;https://www.cs.cmu.edu/~rsalakhu/papers/LakeEtAl2015Science.pdf&quot;&gt;“学习”学习&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;元学习可以解决的任务可以是任意一类定义好的机器学习任务，像是监督学习，强化学习等。具体的元学习任务例子有：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;在没有猫的训练集上训练出来一个图片分类器，这个分类器需要在看过少数几张猫的照片后分辨出测试集的照片中有没有猫。&lt;/li&gt;
  &lt;li&gt;训练一个玩游戏的AI，这个AI需要快速学会如何玩一个从来没玩过的游戏。&lt;/li&gt;
  &lt;li&gt;一个仅在平地上训练过的机器人，需要在山坡上完成给定的任务。&lt;/li&gt;
&lt;/ul&gt;

&lt;ul class=&quot;table-of-content&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#元学习问题定义&quot; id=&quot;markdown-toc-元学习问题定义&quot;&gt;元学习问题定义&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#a-simple-view&quot; id=&quot;markdown-toc-a-simple-view&quot;&gt;A Simple View&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#像测试一样训练&quot; id=&quot;markdown-toc-像测试一样训练&quot;&gt;像测试一样训练&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#学习器和元学习器&quot; id=&quot;markdown-toc-学习器和元学习器&quot;&gt;学习器和元学习器&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#常见方法&quot; id=&quot;markdown-toc-常见方法&quot;&gt;常见方法&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#基于度量的方法&quot; id=&quot;markdown-toc-基于度量的方法&quot;&gt;基于度量的方法&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#convolutional-siamese-neural-network&quot; id=&quot;markdown-toc-convolutional-siamese-neural-network&quot;&gt;Convolutional Siamese Neural Network&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#matching-networks&quot; id=&quot;markdown-toc-matching-networks&quot;&gt;Matching Networks&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#simple-embedding&quot; id=&quot;markdown-toc-simple-embedding&quot;&gt;Simple Embedding&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#full-context-embeddings&quot; id=&quot;markdown-toc-full-context-embeddings&quot;&gt;Full Context Embeddings&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#relation-network&quot; id=&quot;markdown-toc-relation-network&quot;&gt;Relation Network&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#prototypical-networks&quot; id=&quot;markdown-toc-prototypical-networks&quot;&gt;Prototypical Networks&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#基于模型的方法&quot; id=&quot;markdown-toc-基于模型的方法&quot;&gt;基于模型的方法&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#memory-augmented-neural-networks&quot; id=&quot;markdown-toc-memory-augmented-neural-networks&quot;&gt;Memory-Augmented Neural Networks&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#mann-for-meta-learning&quot; id=&quot;markdown-toc-mann-for-meta-learning&quot;&gt;MANN for Meta-Learning&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#addressing-mechanism-for-meta-learning&quot; id=&quot;markdown-toc-addressing-mechanism-for-meta-learning&quot;&gt;Addressing Mechanism for Meta-Learning&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#meta-networks&quot; id=&quot;markdown-toc-meta-networks&quot;&gt;Meta Networks&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#fast-weights&quot; id=&quot;markdown-toc-fast-weights&quot;&gt;Fast Weights&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#model-components&quot; id=&quot;markdown-toc-model-components&quot;&gt;Model Components&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#训练过程&quot; id=&quot;markdown-toc-训练过程&quot;&gt;训练过程&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#基于优化的方法&quot; id=&quot;markdown-toc-基于优化的方法&quot;&gt;基于优化的方法&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#lstm-meta-learner&quot; id=&quot;markdown-toc-lstm-meta-learner&quot;&gt;LSTM Meta-Learner&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#为什么使用-lstm&quot; id=&quot;markdown-toc-为什么使用-lstm&quot;&gt;为什么使用 LSTM？&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#model-setup&quot; id=&quot;markdown-toc-model-setup&quot;&gt;Model Setup&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#maml&quot; id=&quot;markdown-toc-maml&quot;&gt;MAML&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#first-order-maml&quot; id=&quot;markdown-toc-first-order-maml&quot;&gt;First-Order MAML&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#reptile&quot; id=&quot;markdown-toc-reptile&quot;&gt;Reptile&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#the-optimization-assumption&quot; id=&quot;markdown-toc-the-optimization-assumption&quot;&gt;The Optimization Assumption&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#reptile-vs-fomaml&quot; id=&quot;markdown-toc-reptile-vs-fomaml&quot;&gt;Reptile vs FOMAML&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#引用&quot; id=&quot;markdown-toc-引用&quot;&gt;引用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;元学习问题定义&quot;&gt;元学习问题定义&lt;/h2&gt;

&lt;p&gt;在本文中，我们主要关注监督学习中的元学习任务，比如图像分类。在之后的文章中我们会继续讲解更有意思的元强化学习。&lt;/p&gt;

&lt;h3 id=&quot;a-simple-view&quot;&gt;A Simple View&lt;/h3&gt;

&lt;p&gt;我们现在假设有一个任务的分布，我们从这个分布中采样了许多任务作为训练集。好的元学习模型在这个训练集上训练后，应当对这个空间里所有的任务都具有良好的表现，即使是从来没见过的任务。每个任务可以表示为一个数据集 &lt;script type=&quot;math/tex&quot;&gt;\mathcal{D}&lt;/script&gt; ，数据集中包括特征向量 &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; 和标签 &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt; ，分布表示为 &lt;script type=&quot;math/tex&quot;&gt;p(\mathcal{D})&lt;/script&gt; 。那么最佳的元学习模型参数可以表示为：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\theta^* = \arg\min_\theta \mathbb{E}_{\mathcal{D}\sim p(\mathcal{D})} [\mathcal{L}_\theta(\mathcal{D})]&lt;/script&gt;

&lt;p&gt;上式的形式跟一般的学习任务非常像，只不过上式中的每个&lt;em&gt;数据集&lt;/em&gt;是一个&lt;em&gt;数据样本&lt;/em&gt;。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;少样本学习（Few-shot classification）&lt;/em&gt; 是元学习的在监督学习中的一个实例。数据集 &lt;script type=&quot;math/tex&quot;&gt;\mathcal{D}&lt;/script&gt; 经常被划分为两部分，一个用于学习的支持集（support set） &lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt; ，和一个用于训练和测试的预测集（prediction set） &lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt; ，即 &lt;script type=&quot;math/tex&quot;&gt;\mathcal{D}=\langle S, B\rangle&lt;/script&gt; 。&lt;em&gt;K-shot N-class&lt;/em&gt;分类任务，即支持集中有N类数据，每类数据有K个带有标注的样本。&lt;/p&gt;

&lt;p style=&quot;width: 100%;&quot; class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/images/2019-09-19-meta-learning/few-shot-classification.png&quot; alt=&quot;few-shot-classification&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig. 1. 4-shot 2-class 图像分类的例子。 (图像来自&lt;a href=&quot;https://www.pinterest.com/&quot;&gt;Pinterest&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;像测试一样训练&quot;&gt;像测试一样训练&lt;/h3&gt;

&lt;p&gt;一个数据集 &lt;script type=&quot;math/tex&quot;&gt;\mathcal{D}&lt;/script&gt; 包含许多对特征向量和标签，即 &lt;script type=&quot;math/tex&quot;&gt;\mathcal{D} = \{(\mathbf{x}_i, y_i)\}&lt;/script&gt; 。每个标签属于一个标签类 &lt;script type=&quot;math/tex&quot;&gt;\mathcal{L}&lt;/script&gt; 。假设我们的分类器 &lt;script type=&quot;math/tex&quot;&gt;f_\theta&lt;/script&gt; 的输入是特征向量 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{x}&lt;/script&gt; ，输出是属于第 &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt; 类的概率 &lt;script type=&quot;math/tex&quot;&gt;P_\theta(y\vert\mathbf{x})&lt;/script&gt; ， &lt;script type=&quot;math/tex&quot;&gt;\theta&lt;/script&gt; 是分类器的参数。&lt;/p&gt;

&lt;p&gt;如果我们每次选一个 &lt;script type=&quot;math/tex&quot;&gt;B \subset \mathcal{D}&lt;/script&gt; 作为训练的batch，则最佳的模型参数，应当能够最大化，多组batch的正确标签概率之和。&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
\theta^* &amp;= {\arg\max}_{\theta} \mathbb{E}_{(\mathbf{x}, y)\in \mathcal{D}}[P_\theta(y \vert \mathbf{x})] &amp;\\
\theta^* &amp;= {\arg\max}_{\theta} \mathbb{E}_{B\subset \mathcal{D}}[\sum_{(\mathbf{x}, y)\in B}P_\theta(y \vert \mathbf{x})] &amp; \scriptstyle{\text{; trained with mini-batches.}}
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;p&gt;few-shot classification的目标是，在小规模的support set上“快速学习”（类似fine-tuning）后，能够减少在prediction set上的预测误差。为了训练模型快速学习的能力，我们在训练的时候按照以下步骤：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;采样一个标签的子集, &lt;script type=&quot;math/tex&quot;&gt;L\subset\mathcal{L}&lt;/script&gt; .&lt;/li&gt;
  &lt;li&gt;根据采样的标签子集，采样一个support set &lt;script type=&quot;math/tex&quot;&gt;S^L \subset \mathcal{D}&lt;/script&gt; 和一个training batch &lt;script type=&quot;math/tex&quot;&gt;B^L \subset \mathcal{D}&lt;/script&gt; 。 &lt;script type=&quot;math/tex&quot;&gt;S^L&lt;/script&gt; 和 &lt;script type=&quot;math/tex&quot;&gt;B^L&lt;/script&gt; 中的数据的标签都属于 &lt;script type=&quot;math/tex&quot;&gt;L&lt;/script&gt; ，即 &lt;script type=&quot;math/tex&quot;&gt;y \in L, \forall (x, y) \in S^L, B^L&lt;/script&gt; .&lt;/li&gt;
  &lt;li&gt;把support set作为模型的输入，进行“快速学习”。注意，不同的算法具有不同的学习策略，但总的来说，这一步不会永久性更新模型参数。 &lt;!-- , $$ \hat{y}=f_\theta(\mathbf{x}, S^L) $$ --&gt;&lt;/li&gt;
  &lt;li&gt;把prediction set作为模型的输入，计算模型在 &lt;script type=&quot;math/tex&quot;&gt;B^L&lt;/script&gt; 上的loss，根据这个loss进行反向传播更新模型参数。这一步与监督学习一致。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;你可以把每一对 &lt;script type=&quot;math/tex&quot;&gt;(S^L, B^L)&lt;/script&gt; 看做是一个数据点。模型被训练出了在其他数据集上扩展的能力。下式中的红色部分是元学习的目标相比于监督学习的目标多出来的部分。&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\theta = \arg\max_\theta \color{red}{E_{L\subset\mathcal{L}}[} E_{\color{red}{S^L \subset\mathcal{D}, }B^L \subset\mathcal{D}} [\sum_{(x, y)\in B^L} P_\theta(x, y\color{red}{, S^L})] \color{red}{]}&lt;/script&gt;

&lt;p&gt;这个想法有点像是我们面对某个只有少量数据的任务时，会使用在相关任务的大数据集上预训练的模型，然后进行fine-tuning。像是图形语义分割网络可以用在ImageNet上预训练的模型做初始化。相比于在一个特定任务上fine-tuning使得模型更好的拟合这个任务，元学习更进一步，它的目标是让模型优化以后能够在多个任务上表现的更好，类似于变得更容易被fine-tuning。&lt;/p&gt;

&lt;h3 id=&quot;学习器和元学习器&quot;&gt;学习器和元学习器&lt;/h3&gt;

&lt;p&gt;还有一种常见的看待meta-learning的视角，把模型的更新划分为了两个阶段：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;根据给定的任务，训练一个分类器 &lt;script type=&quot;math/tex&quot;&gt;f_\theta&lt;/script&gt; 完成任务，作为“学习器”模型&lt;/li&gt;
  &lt;li&gt;同时，训练一个元学习器 &lt;script type=&quot;math/tex&quot;&gt;g_\phi&lt;/script&gt; ，根据support set &lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt; 学习如何更新学习器模型的参数。 &lt;script type=&quot;math/tex&quot;&gt;\theta' = g_\phi(\theta, S)&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;则最后的优化目标中，我们需要更新 &lt;script type=&quot;math/tex&quot;&gt;\theta&lt;/script&gt; 和 &lt;script type=&quot;math/tex&quot;&gt;\phi&lt;/script&gt; 来最大化：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathbb{E}_{L\subset\mathcal{L}}[ \mathbb{E}_{S^L \subset\mathcal{D}, B^L \subset\mathcal{D}} [\sum_{(\mathbf{x}, y)\in B^L} P_{g_\phi(\theta, S^L)}(y \vert \mathbf{x})]]&lt;/script&gt;

&lt;h3 id=&quot;常见方法&quot;&gt;常见方法&lt;/h3&gt;

&lt;p&gt;元学习主要有三类常见的方法：基于度量的方法（metric-based），基于模型的方法（model-based），基于优化的方法（optimization-based）。
Oriol Vinyals在NIPS 2018的meta-learning symposium上做了一个很好的&lt;a href=&quot;http://metalearning-symposium.ml/files/vinyals.pdf&quot;&gt;总结&lt;/a&gt;：&lt;/p&gt;

&lt;table class=&quot;info&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Model-based&lt;/th&gt;
      &lt;th&gt;Metric-based&lt;/th&gt;
      &lt;th&gt;Optimization-based&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Key idea&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;RNN; memory&lt;/td&gt;
      &lt;td&gt;Metric learning&lt;/td&gt;
      &lt;td&gt;Gradient descent&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;How &lt;script type=&quot;math/tex&quot;&gt;P_\theta(y \vert \mathbf{x})&lt;/script&gt; is modeled?&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;f_\theta(\mathbf{x}, S)&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\sum_{(\mathbf{x}_i, y_i) \in S} k_\theta(\mathbf{x}, \mathbf{x}_i)y_i&lt;/script&gt; (*)&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;P_{g_\phi(\theta, S^L)}(y \vert \mathbf{x})&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;(*) &lt;script type=&quot;math/tex&quot;&gt;k_\theta&lt;/script&gt; 是一个衡量 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{x}_i&lt;/script&gt; 和 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{x}&lt;/script&gt; 相似度的kernel function。&lt;/p&gt;

&lt;p&gt;接下来我们会回顾各种方法的经典模型。&lt;/p&gt;

&lt;h2 id=&quot;基于度量的方法&quot;&gt;基于度量的方法&lt;/h2&gt;

&lt;p&gt;基于度量的元学习的核心思想类似于最近邻算法(&lt;a href=&quot;https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm&quot;&gt;k-NN分类&lt;/a&gt;、&lt;a href=&quot;https://en.wikipedia.org/wiki/K-means_clustering&quot;&gt;k-means聚类&lt;/a&gt;)和&lt;a href=&quot;https://en.wikipedia.org/wiki/Kernel_density_estimation&quot;&gt;核密度估计&lt;/a&gt;。该类方法在已知标签的集合上预测出来的概率，是support set中的样本标签的加权和。 权重由核函数（kernal function） &lt;script type=&quot;math/tex&quot;&gt;k_\theta&lt;/script&gt; 算得，该权重代表着两个数据样本之间的相似性。&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P_\theta(y \vert \mathbf{x}, S) = \sum_{(\mathbf{x}_i, y_i) \in S} k_\theta(\mathbf{x}, \mathbf{x}_i)y_i&lt;/script&gt;

&lt;p&gt;因此，学到一个好的核函数对于基于度量的元学习模型至关重要。&lt;a href=&quot;https://en.wikipedia.org/wiki/Similarity_learning#Metric_learning&quot;&gt;Metric learning&lt;/a&gt;正是针对该问题提出的方法，它的目标就是学到一个不同样本之间的metric或者说是距离函数。任务不同，好的metric的定义也不同。但它一定在任务空间上表示了输入之间的联系，并且能够帮助我们解决问题。&lt;/p&gt;

&lt;p&gt;下面列出的所有方法都显式的学习了输入数据的嵌入向量（embedding vectors），并根据其设计合适的kernel function。&lt;/p&gt;

&lt;h3 id=&quot;convolutional-siamese-neural-network&quot;&gt;Convolutional Siamese Neural Network&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://papers.nips.cc/paper/769-signature-verification-using-a-siamese-time-delay-neural-network.pdf&quot;&gt;Siamese Neural Network&lt;/a&gt;最早被提出用来解决笔迹验证问题，siamese network由两个孪生网络组成，这两个网络的输出被联合起来训练一个函数，用于学习一对数据输入之间的关系。这两个网络结构相同，共享参数，实际上就是一个网络在学习如何有效地embedding才能显现出一对数据之间的关系。顺便一提，这是LeCun 1994年的论文。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cs.toronto.edu/~rsalakhu/papers/oneshot1.pdf&quot;&gt;Koch, Zemel &amp;amp; Salakhutdinov (2015)&lt;/a&gt;提出了一种用siamese网络做one-shot image classification的方法。首先，训练一个用于图片验证的siamese网络，分辨两张图片是否属于同一类。然后在测试时，siamese网络把测试输入和support set里面的所有图片进行比较，选择相似度最高的那张图片所属的类作为输出。&lt;/p&gt;

&lt;p style=&quot;width: 100%;&quot; class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/images/2019-09-19-meta-learning/siamese-conv-net.png&quot; alt=&quot;siamese&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig. 2. 卷积siamese网络用于few-shot image classification的例子。&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;首先，卷积siamese网络学习一个由多个卷积层组成的embedding函数 &lt;script type=&quot;math/tex&quot;&gt;f_\theta&lt;/script&gt; ，把两张图片编码为特征向量。&lt;/li&gt;
  &lt;li&gt;两个特征向量之间的L1距离可以表示为 &lt;script type=&quot;math/tex&quot;&gt;\vert f_\theta(\mathbf{x}_i) - f_\theta(\mathbf{x}_j) \vert&lt;/script&gt; 。&lt;/li&gt;
  &lt;li&gt;通过一个linear feedforward layer和sigmoid把距离转换为概率。这就是两张图片属于同一类的概率。&lt;/li&gt;
  &lt;li&gt;loss函数就是cross entropy loss，因为label是二元的。&lt;/li&gt;
&lt;/ol&gt;

&lt;!-- In this way, an efficient image embedding is trained so that the distance between two embeddings is proportional to the similarity between two images. --&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
p(\mathbf{x}_i, \mathbf{x}_j) &amp;= \sigma(\mathbf{W}\vert f_\theta(\mathbf{x}_i) - f_\theta(\mathbf{x}_j) \vert) \\
\mathcal{L}(B) &amp;= \sum_{(\mathbf{x}_i, \mathbf{x}_j, y_i, y_j)\in B} \mathbf{1}_{y_i=y_j}\log p(\mathbf{x}_i, \mathbf{x}_j) + (1-\mathbf{1}_{y_i=y_j})\log (1-p(\mathbf{x}_i, \mathbf{x}_j))
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;p&gt;Training batch &lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt; 可以通过对图片做一些变形增加数据量。你也可以把L1距离替换成其他距离，比如L2距离、cosine距离等等。只要距离是可导的就可以。&lt;/p&gt;

&lt;p&gt;给定一个支持集 &lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt; 和一个测试图片 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{x}&lt;/script&gt; ，最终预测的分类为：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\hat{c}_S(\mathbf{x}) = c(\arg\max_{\mathbf{x}_i \in S} P(\mathbf{x}, \mathbf{x}_i))&lt;/script&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;c(\mathbf{x})&lt;/script&gt; 是图片 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{x}&lt;/script&gt; 的label， &lt;script type=&quot;math/tex&quot;&gt;\hat{c}(.)&lt;/script&gt; 是预测的label。&lt;/p&gt;

&lt;p&gt;这里我们有一个假设：学到的embedding在未见过的分类上依然能很好的衡量图片间的距离。这个假设跟迁移学习中使用预训练模型所隐含的假设是一样的。比如，在ImageNet上预训练的模型，其学到的卷积特征表达方式对于其他图像任务也有帮助。但实际上当新任务与旧任务有所差别的时候，预训练模型的效果就没有那么好了。&lt;/p&gt;

&lt;h3 id=&quot;matching-networks&quot;&gt;Matching Networks&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Matching Networks&lt;/strong&gt; (&lt;a href=&quot;http://papers.nips.cc/paper/6385-matching-networks-for-one-shot-learning.pdf&quot;&gt;Vinyals et al., 2016&lt;/a&gt;)的目标是：对于每一个给定的支持集 &lt;script type=&quot;math/tex&quot;&gt;S=\{x_i, y_i\}_{i=1}^k&lt;/script&gt; (&lt;em&gt;k-shot&lt;/em&gt; classification)，分别学一个分类器 &lt;script type=&quot;math/tex&quot;&gt;c_S&lt;/script&gt; 。 这个分类器给出了给定测试样本 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{x}&lt;/script&gt; 时，输出 &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt; 的概率分布。这个分类器的输出被定义为支持集中一系列label的加权和，权重由一个注意力核（attention kernel） &lt;script type=&quot;math/tex&quot;&gt;a(\mathbf{x}, \mathbf{x}_i)&lt;/script&gt; 决定。权重应当与 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{x}&lt;/script&gt; 和 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{x}_i&lt;/script&gt; 间的相似度成正比。&lt;/p&gt;

&lt;p style=&quot;width: 70%;&quot; class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/images/2019-09-19-meta-learning/matching-networks.png&quot; alt=&quot;siamese&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig. 3. Matching Networks结构。（图像来源: &lt;a href=&quot;http://papers.nips.cc/paper/6385-matching-networks-for-one-shot-learning.pdf&quot;&gt;原论文&lt;/a&gt;）&lt;/em&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;c_S(\mathbf{x}) = P(y \vert \mathbf{x}, S) = \sum_{i=1}^k a(\mathbf{x}, \mathbf{x}_i) y_i
\text{, where }S=\{(\mathbf{x}_i, y_i)\}_{i=1}^k&lt;/script&gt;

&lt;p&gt;Attention kernel由两个embedding function &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; 和 &lt;script type=&quot;math/tex&quot;&gt;g&lt;/script&gt; 决定。分别用于encoding测试样例和支持集样本。两个样本之间的注意力权重是经过softmax归一化后的，他们embedding vectors的cosine距离 &lt;script type=&quot;math/tex&quot;&gt;\text{cosine}(.)&lt;/script&gt; 。&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;a(\mathbf{x}, \mathbf{x}_i) = \frac{\exp(\text{cosine}(f(\mathbf{x}), g(\mathbf{x}_i))}{\sum_{j=1}^k\exp(\text{cosine}(f(\mathbf{x}), g(\mathbf{x}_j))}&lt;/script&gt;

&lt;h4 id=&quot;simple-embedding&quot;&gt;Simple Embedding&lt;/h4&gt;

&lt;p&gt;在简化版本里，embedding function是一个使用单样本作为输入的神经网络。而且我们可以假设 &lt;script type=&quot;math/tex&quot;&gt;f=g&lt;/script&gt; 。&lt;/p&gt;

&lt;h4 id=&quot;full-context-embeddings&quot;&gt;Full Context Embeddings&lt;/h4&gt;

&lt;p&gt;Embeding vectors对于构建一个好的分类器至关重要。只把一个数据样本作为embedding function的输入，会导致很难高效的估计出整个特征空间。因此，Matching Network模型又进一步发展，通过把整个支持集 &lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt; 作为embedding function的额外输入来加强embedding的有效性，相当于给样本添加了语境，让embedding根据样本与支持集中样本的关系进行调整。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;g_\theta(\mathbf{x}_i, S)&lt;/script&gt; 在整个支持集 &lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt; 的语境下用一个双向LSTM来编码 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{x}_i&lt;/script&gt; .&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;f_\theta(\mathbf{x}, S)&lt;/script&gt; 在支持集 &lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt; 上使用read attention机制编码测试样本 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{x}&lt;/script&gt; 。&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;首先测试样本经过一个简单的神经网络，比如CNN，以抽取基本特征 &lt;script type=&quot;math/tex&quot;&gt;f'(\mathbf{x})&lt;/script&gt; 。&lt;/li&gt;
      &lt;li&gt;然后，一个带有read attention vector的LSTM被训练用于生成部分hidden state：&lt;br /&gt;
  &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{aligned}
  \hat{\mathbf{h}}_t, \mathbf{c}_t &amp;= \text{LSTM}(f'(\mathbf{x}), [\mathbf{h}_{t-1}, \mathbf{r}_{t-1}], \mathbf{c}_{t-1}) \\
  \mathbf{h}_t &amp;= \hat{\mathbf{h}}_t + f'(\mathbf{x}) \\
  \mathbf{r}_{t-1} &amp;= \sum_{i=1}^k a(\mathbf{h}_{t-1}, g(\mathbf{x}_i)) g(\mathbf{x}_i) \\
  a(\mathbf{h}_{t-1}, g(\mathbf{x}_i)) &amp;= \text{softmax}(\mathbf{h}_{t-1}^\top g(\mathbf{x}_i)) = \frac{\exp(\mathbf{h}_{t-1}^\top g(\mathbf{x}_i))}{\sum_{j=1}^k \exp(\mathbf{h}_{t-1}^\top g(\mathbf{x}_j))}
  \end{aligned} %]]&gt;&lt;/script&gt;&lt;/li&gt;
      &lt;li&gt;最终，如果我们做k步的读取 &lt;script type=&quot;math/tex&quot;&gt;f(\mathbf{x}, S)=\mathbf{h}_K&lt;/script&gt; 。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这类embedding方法被称作“全语境嵌入”（Full Contextual Embeddings）。有意思的是，这类方法对于困难的任务（few-shot classification on mini ImageNet）有所帮助，但对于简单的任务却没有提升（Omniglot）。&lt;/p&gt;

&lt;p&gt;Matching Networks的训练过程与测试时的推理过程是一致的，详情请回顾之前的&lt;a href=&quot;#像测试一样训练&quot;&gt;章节&lt;/a&gt;。值得一提的是，Matching Networks的论文强调了训练和测试的条件应当一致的原则。&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\theta^* = \arg\max_\theta \mathbb{E}_{L\subset\mathcal{L}}[ \mathbb{E}_{S^L \subset\mathcal{D}, B^L \subset\mathcal{D}} [\sum_{(\mathbf{x}, y)\in B^L} P_\theta(y\vert\mathbf{x}, S^L)]]&lt;/script&gt;

&lt;h3 id=&quot;relation-network&quot;&gt;Relation Network&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Relation Network (RN)&lt;/strong&gt; (&lt;a href=&quot;http://openaccess.thecvf.com/content_cvpr_2018/papers_backup/Sung_Learning_to_Compare_CVPR_2018_paper.pdf&quot;&gt;Sung et al., 2018&lt;/a&gt;)与&lt;a href=&quot;#convolutional-siamese-neural-network&quot;&gt;siamese network&lt;/a&gt;比较像，但有以下几个不同点：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;两个样本间的相似系数不是由特征空间的L1距离决定的，而是由一个CNN分类器 &lt;script type=&quot;math/tex&quot;&gt;g_\phi&lt;/script&gt; 预测的。两个样本 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{x}_i&lt;/script&gt; 和 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{x}_j&lt;/script&gt; 间的相似系数为 &lt;script type=&quot;math/tex&quot;&gt;r_{ij} = g_\phi([\mathbf{x}_i, \mathbf{x}_j])&lt;/script&gt; ，其中 &lt;script type=&quot;math/tex&quot;&gt;[.,.]&lt;/script&gt; 代表着concatenation。&lt;/li&gt;
  &lt;li&gt;目标优化函数是MSE损失，而不是cross-entropy，因为RN在预测时更倾向于把相似系数预测过程作为一个regression问题，而不是二分类问题， &lt;script type=&quot;math/tex&quot;&gt;\mathcal{L}(B) = \sum_{(\mathbf{x}_i, \mathbf{x}_j, y_i, y_j)\in B} (r_{ij} - \mathbf{1}_{y_i=y_j})^2&lt;/script&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p style=&quot;width: 100%;&quot; class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/images/2019-09-19-meta-learning/relation-network.png&quot; alt=&quot;relation-network&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig. 4. Relation Network的结构，图中是一个5分类1-shot的例子。(图片来源：&lt;a href=&quot;http://openaccess.thecvf.com/content_cvpr_2018/papers_backup/Sung_Learning_to_Compare_CVPR_2018_paper.pdf&quot;&gt;原论文&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;(注意：还有一个&lt;a href=&quot;https://deepmind.com/blog/neural-approach-relational-reasoning/&quot;&gt;Relation Network&lt;/a&gt;是DeepMind提出来用于关系推理的，不要搞混了。)&lt;/p&gt;

&lt;h3 id=&quot;prototypical-networks&quot;&gt;Prototypical Networks&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Prototypical Networks&lt;/strong&gt; (&lt;a href=&quot;http://papers.nips.cc/paper/6996-prototypical-networks-for-few-shot-learning.pdf&quot;&gt;Snell, Swersky &amp;amp; Zemel, 2017&lt;/a&gt;)用一个嵌入函数 &lt;script type=&quot;math/tex&quot;&gt;f_\theta&lt;/script&gt; 把每个输入编码为一个M维特征向量。然后对每一类 &lt;script type=&quot;math/tex&quot;&gt;c \in \mathcal{C}&lt;/script&gt; ，取所有支持集样本的特征向量的平均值作为这个类的prototype特征。&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathbf{v}_c = \frac{1}{|S_c|} \sum_{(\mathbf{x}_i, y_i) \in S_c} f_\theta(\mathbf{x}_i)&lt;/script&gt;

&lt;p style=&quot;width: 100%;&quot; class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/images/2019-09-19-meta-learning/prototypical-networks.png&quot; alt=&quot;prototypical-networks&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig. 5. 在少样本学习和无样本学习中的Prototypical networks。(图像来源：&lt;a href=&quot;http://papers.nips.cc/paper/6996-prototypical-networks-for-few-shot-learning.pdf&quot;&gt;原论文&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;测试样本属于各类的概率分布由特征向量和prototype向量的距离取负后通过softmanx得到。&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(y=c\vert\mathbf{x})=\text{softmax}(-d_\varphi(f_\theta(\mathbf{x}), \mathbf{v}_c)) = \frac{\exp(-d_\varphi(f_\theta(\mathbf{x}), \mathbf{v}_c))}{\sum_{c' \in \mathcal{C}}\exp(-d_\varphi(f_\theta(\mathbf{x}), \mathbf{v}_{c'}))}&lt;/script&gt;

&lt;p&gt;其中 &lt;script type=&quot;math/tex&quot;&gt;d_\varphi&lt;/script&gt; 可以是任意距离函数，只要 &lt;script type=&quot;math/tex&quot;&gt;\varphi&lt;/script&gt; 可导即可。这篇文章中，他们使用了平方欧氏距离。&lt;/p&gt;

&lt;p&gt;损失函数用的是负对数似然: &lt;script type=&quot;math/tex&quot;&gt;\mathcal{L}(\theta) = -\log P_\theta(y=c\vert\mathbf{x})&lt;/script&gt; .&lt;/p&gt;

&lt;h2 id=&quot;基于模型的方法&quot;&gt;基于模型的方法&lt;/h2&gt;

&lt;p&gt;基于模型的元学习方法不对 &lt;script type=&quot;math/tex&quot;&gt;P_\theta(y\vert\mathbf{x})&lt;/script&gt; 作出任何假设。 &lt;script type=&quot;math/tex&quot;&gt;P_\theta(y\vert\mathbf{x})&lt;/script&gt; 是由一个专门用来快速学习的模型生成的，快速学习指的是这个模型可以根据少量的训练快速更新参数。有两种方式可以实现快速学习，1.设计好模型的内部架构使其能够快速学习，2.用另外一个模型来生成快速学习模型的参数。&lt;/p&gt;

&lt;h3 id=&quot;memory-augmented-neural-networks&quot;&gt;Memory-Augmented Neural Networks&lt;/h3&gt;

&lt;p&gt;许多模型架构使用了外部储存来帮助神经网络学习，像是&lt;a href=&quot;https://lilianweng.github.io/lil-log/2018/06/24/attention-attention.html#neural-turing-machines&quot;&gt;Neural Turing Machines&lt;/a&gt;和&lt;a href=&quot;https://arxiv.org/abs/1410.3916&quot;&gt;Memory Networks&lt;/a&gt;。使用外部存储，让神经网络能够更容易的学到新知识并提供给以后使用。这样的模型被称为&lt;strong&gt;MANN&lt;/strong&gt;（”&lt;strong&gt;Memory-Augmented Neural Network&lt;/strong&gt;“）。注意，只使用了&lt;em&gt;内部存储&lt;/em&gt;的循环神经网络并不是MANN，比如RNN、LSTM。&lt;/p&gt;

&lt;p&gt;MANN的目的是在仅给定几个训练样本的情况下，快速编码新的信息并适应新的任务，因此MANN非常适合用于元学习。&lt;a href=&quot;http://proceedings.mlr.press/v48/santoro16.pdf&quot;&gt;Santoro et al. (2016)&lt;/a&gt;以Neural Turing Machine（NTM）为基础，对训练和存储读写机制（也称为“寻址机制”，即如何对存储向量分配注意力权重）做了一系列的修改。如果你对NTM或寻址机制不太熟悉的话，可以参见原作者之前博文中的&lt;a href=&quot;https://lilianweng.github.io/lil-log/2018/06/24/attention-attention.html#neural-turing-machines&quot;&gt;NTM介绍&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;简要回顾一下，NTM由一个控制器神经网络和存储器组成。控制器学习如何通过软注意力（soft attention）读写存储器，而存储器相当于是一个知识库。注意力权重是由寻址机制生成的，由询问的内容和位置共同决定。&lt;/p&gt;

&lt;p style=&quot;width: 70%;&quot; class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/images/2019-09-19-meta-learning/NTM.png&quot; alt=&quot;NTM&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig. 6. NTM的架构，t时刻的存储， &lt;script type=&quot;math/tex&quot;&gt;\mathbf{M}_t&lt;/script&gt; 是一个大小为 &lt;script type=&quot;math/tex&quot;&gt;N \times M&lt;/script&gt; 的矩阵，代表着N个M维的向量，每个向量是一条记录&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;mann-for-meta-learning&quot;&gt;MANN for Meta-Learning&lt;/h4&gt;

&lt;p&gt;为了在元学习中使用MANN，我们需要训练这个网络使得它能够快速提炼新任务的信息，而且能够快速稳定的查询之前存储的特征。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://proceedings.mlr.press/v48/santoro16.pdf&quot;&gt;Santoro et al., 2016&lt;/a&gt;提出了一种有意思的训练方式，他们强迫存储器保留当前样本的信息直到对应的标签出现。在每个episode中，标签有 &lt;script type=&quot;math/tex&quot;&gt;一步的延迟&lt;/script&gt; ，即每次给出的训练对为 &lt;script type=&quot;math/tex&quot;&gt;(\mathbf{x}_{t+1}, y_t)&lt;/script&gt; 。&lt;/p&gt;

&lt;p style=&quot;width: 100%;&quot; class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/images/2019-09-19-meta-learning/mann-meta-learning.png&quot; alt=&quot;NTM&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig. 7. MANN在元学习中的任务设置（图像来源：&lt;a href=&quot;http://proceedings.mlr.press/v48/santoro16.pdf&quot;&gt;原论文&lt;/a&gt;）。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;通过这种设定，MANN会学到要记住新数据集的信息，因为存储器需要保留着当前输入的信息，并且在对应的标签出现的时候取回之前存储的信息进行预测。&lt;/p&gt;

&lt;p&gt;接下来，我们看看存储器是完成信息的存储和取回的。&lt;/p&gt;

&lt;h4 id=&quot;addressing-mechanism-for-meta-learning&quot;&gt;Addressing Mechanism for Meta-Learning&lt;/h4&gt;

&lt;p&gt;为了让模型更加适应元学习，除了改变训练过程，作者还增加了一个完全基于内容的寻址机制。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;» 如何从存储器中取回信息?&lt;/strong&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;读取注意力（read attention）完全由内容相似度决定。&lt;/p&gt;

&lt;p&gt;首先，根据t时刻的输入 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{x}&lt;/script&gt; ，控制器生成一个键值特征向量 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{k}_t&lt;/script&gt; 。然后用类似于NTM的方法，计算键值特征向量和存储器中每个向量的cosine距离，经过softmax归一化，得到一个读取权重向量 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{w}_t^r&lt;/script&gt; 。读取向量 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{r}_t&lt;/script&gt; 是对存储器中所有向量的加权和：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathbf{r}_i = \sum_{i=1}^N w_t^r(i)\mathbf{M}_t(i)
\text{, where } w_t^r(i) = \text{softmax}(\frac{\mathbf{k}_t \cdot \mathbf{M}_t(i)}{\|\mathbf{k}_t\| \cdot \|\mathbf{M}_t(i)\|})&lt;/script&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;M_t&lt;/script&gt; 是t时刻的存储器矩阵， &lt;script type=&quot;math/tex&quot;&gt;M_t(i)&lt;/script&gt; 是该矩阵中的第i行，即第i个向量。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;» 如何往存储器中写入信息?&lt;/strong&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;写入新信息的寻址机制跟&lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_replacement_policies&quot;&gt;缓存置换机制&lt;/a&gt;很像。为了更好的适应元学习的任务，MANN使用的是&lt;strong&gt;最近最少使用算法(Least Recently Used Access, LRUA)&lt;/strong&gt;。LRUA算法会优先覆盖&lt;em&gt;最少&lt;/em&gt;使用的，或者&lt;em&gt;最近&lt;/em&gt;刚用过的存储位置。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;最少使用的位置：目的是保存经常使用的那些信息(参见&lt;a href=&quot;https://en.wikipedia.org/wiki/Least_frequently_used&quot;&gt;LFU&lt;/a&gt;);&lt;/li&gt;
  &lt;li&gt;最近使用的位置：原因是刚用过的信息很有可能不会马上用到(参见&lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_replacement_policies#Most_recently_used_(MRU)&quot;&gt;MRU&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除了LRUA，还有许多其他的缓存置换算法。根据场景的不同，其他的算法可能有更好的表现。另外相比于人为指定一种缓存替换机制，根据存储使用的规律，学出一套寻址策略可能效果更好。&lt;/p&gt;

&lt;p&gt;这里的LRUA以一种所有运算都可微分的方式实现：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;t时刻的使用权重 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{w}^u_t&lt;/script&gt; 是当前读写向量的和，再加上上一时刻的使用权重 &lt;script type=&quot;math/tex&quot;&gt;\gamma \mathbf{w}^u_{t-1}&lt;/script&gt; ， &lt;script type=&quot;math/tex&quot;&gt;\gamma&lt;/script&gt; 是一个衰减系数。&lt;/li&gt;
  &lt;li&gt;写入向量由之前的读取权重（代表着最近使用的位置）和之前的最少使用权重（代表着最少使用的位置）插值得到。插值参数是超参数 &lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt; 的sigmoid。&lt;/li&gt;
  &lt;li&gt;最少使用权重 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{w}_t^{lu}&lt;/script&gt; 由使用权重 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{w}_t^u&lt;/script&gt; 二值化得到。首先选取 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{w}_t^u&lt;/script&gt; 第n小的元素，找出 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{w}_t^u&lt;/script&gt; 中所有比这个元素小的元素，对应的位置在 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{w}_t^{lu}&lt;/script&gt; 中设为1，反之则设为0。&lt;/li&gt;
&lt;/ol&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
\mathbf{w}_t^u &amp;= \gamma \mathbf{w}_{t-1}^u + \mathbf{w}_t^r + \mathbf{w}_t^w \\
\mathbf{w}_t^r &amp;= \text{softmax}(\text{cosine}(\mathbf{k}_t, \mathbf{M}_t(i))) \\
\mathbf{w}_t^w &amp;= \sigma(\alpha)\mathbf{w}_{t-1}^r + (1-\sigma(\alpha))\mathbf{w}^{lu}_{t-1}\\
\mathbf{w}_t^{lu} &amp;= \mathbf{1}_{w_t^u(i) \leq m(\mathbf{w}_t^u, n)}
\text{, where }m(\mathbf{w}_t^u, n)\text{ is the }n\text{-th smallest element in vector }\mathbf{w}_t^u\text{.}
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;p&gt;最后，在把 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{w}_t^{lu}&lt;/script&gt; 代表着的最近使用存储设为0以后，更新每个存储向量：
 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{M}_t(i) = \mathbf{M}_{t-1}(i) + w_t^w(i)\mathbf{k}_t, \forall i&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;meta-networks&quot;&gt;Meta Networks&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Meta Networks&lt;/strong&gt; (&lt;a href=&quot;https://arxiv.org/abs/1703.00837&quot;&gt;Munkhdalai &amp;amp; Yu, 2017&lt;/a&gt;)，简称&lt;strong&gt;MetaNet&lt;/strong&gt;，是一个专门针对多任务间&lt;em&gt;快速&lt;/em&gt;泛化设计的元学习模型，模型结构和训练过程都经过了调整。&lt;/p&gt;

&lt;h4 id=&quot;fast-weights&quot;&gt;Fast Weights&lt;/h4&gt;

&lt;p&gt;MetaNet的快速泛化能力依赖于“快参数（fast weights）”。有许多论文涉及这个话题，但我还没把他们全都仔细读过，没能找到一个具体的定义，只有一些模糊的共识。一般神经网络的权重是根据目标函数进行随机梯度下降更新的，但这个过程很慢。一种更快的学习方法是利用另外一个神经网络，预测当前神经网络的参数，预测出来的参数被称为&lt;em&gt;快参数&lt;/em&gt;。而普通SGD生成的权重则被称为&lt;em&gt;慢参数&lt;/em&gt;。&lt;/p&gt;

&lt;p&gt;在MetaNet中，损失梯度作为&lt;em&gt;元信息&lt;/em&gt;，被用于生产学习快参数的模型。慢参数和快参数在神经网络中被结合起来用于预测。快参数是针对任务进行优化产生的参数，使用快参数相当于针对当前的任务进行了优化。&lt;/p&gt;

&lt;p style=&quot;width: 50%;&quot; class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/images/2019-09-19-meta-learning/combine-slow-fast-weights.png&quot; alt=&quot;slow-fast-weights&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig. 8. 结合了慢参数和快参数的MLP。 &lt;script type=&quot;math/tex&quot;&gt;\bigoplus&lt;/script&gt; is element-wise sum. (图像来源：&lt;a href=&quot;https://arxiv.org/abs/1703.00837&quot;&gt;原论文&lt;/a&gt;).&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;model-components&quot;&gt;Model Components&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;免责声明：下面的部分与原始论文有所不同。在我看来，这篇文章的想法很有趣，但写的不太好，所以我想用自己的语言来介绍这篇文章。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;MetaNet的关键组件是：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;f_\theta&lt;/script&gt; ：一个由 &lt;script type=&quot;math/tex&quot;&gt;\theta&lt;/script&gt; 决定的编码函数，发挥着元学习器的作用。负责把原始输入编码为特征向量。类似&lt;a href=&quot;#convolutional-siamese-neural-network&quot;&gt;Siamese Neural Network&lt;/a&gt;，我们希望训练这个编码函数使得能够根据其生成的特征向量判断两个输入是否属于同一类（验证任务）。&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;g_\phi&lt;/script&gt; ：一个由 &lt;script type=&quot;math/tex&quot;&gt;\phi&lt;/script&gt; 决定的基学习器，负责完成真正的学习任务。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果我们就此打住的话，这基本就是&lt;a href=&quot;#relation-network&quot;&gt;Relation Network&lt;/a&gt;。
但MetaNet，给这两个模型额外增加了快参数（参加Fig. 8）。&lt;/p&gt;

&lt;p&gt;因此，我们需要额外两个模型，分别用于生成 &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; 和 &lt;script type=&quot;math/tex&quot;&gt;g&lt;/script&gt; 的快参数。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;F_w&lt;/script&gt; ：一个由 &lt;script type=&quot;math/tex&quot;&gt;w&lt;/script&gt; 决定的LSTM，用于学习嵌入函数 &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; 的快参数 &lt;script type=&quot;math/tex&quot;&gt;\theta^+&lt;/script&gt; 。它把 &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; 在验证任务上的loss梯度作为输入。&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;G_v&lt;/script&gt; ：一个由 &lt;script type=&quot;math/tex&quot;&gt;v&lt;/script&gt; 决定的神经网络，根据基学习器 &lt;script type=&quot;math/tex&quot;&gt;g&lt;/script&gt; 的loss梯度学习其快参数 &lt;script type=&quot;math/tex&quot;&gt;\phi^+&lt;/script&gt; 。在MetaNet中，学习器的loss梯度被视作任务的&lt;em&gt;元信息&lt;/em&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;现在我们来看看MetaNet是怎么训练的。训练数据包含许多对数据集。一个支持集 &lt;script type=&quot;math/tex&quot;&gt;S=\{\mathbf{x}'_i, y'_i\}_{i=1}^K&lt;/script&gt; 和一个测试集 &lt;script type=&quot;math/tex&quot;&gt;U=\{\mathbf{x}_i, y_i\}_{i=1}^L&lt;/script&gt; 。我们有四个模型和四个模型参数集 &lt;script type=&quot;math/tex&quot;&gt;(\theta, \phi, w, v)&lt;/script&gt; 要学。&lt;/p&gt;

&lt;p style=&quot;width: 90%;&quot; class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/images/2019-09-19-meta-learning/meta-network.png&quot; alt=&quot;meta-net&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig.9. MetaNet的结构。&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;训练过程&quot;&gt;训练过程&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;从支持集 &lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt; 中随机采样一对输入， &lt;script type=&quot;math/tex&quot;&gt;(\mathbf{x}'_i, y'_i)&lt;/script&gt; 和 &lt;script type=&quot;math/tex&quot;&gt;(\mathbf{x}'_j, y_j)&lt;/script&gt; 。令 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{x}_{(t,1)}=\mathbf{x}'_i&lt;/script&gt; ， &lt;script type=&quot;math/tex&quot;&gt;\mathbf{x}_{(t,2)}=\mathbf{x}'_j&lt;/script&gt; .&lt;br /&gt;
for &lt;script type=&quot;math/tex&quot;&gt;t = 1, \dots, K&lt;/script&gt; :
    &lt;ul&gt;
      &lt;li&gt;a. 计算编码函数的loss，即验证任务上的交叉熵&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\mathcal{L}^\text{emb}_t = \mathbf{1}_{y'_i=y'_j} \log P_t + (1 - \mathbf{1}_{y'_i=y'_j})\log(1 - P_t)\text{, where }P_t = \sigma(\mathbf{W}\vert f_\theta(\mathbf{x}_{(t,1)}) - f_\theta(\mathbf{x}_{(t,2)})\vert)&lt;/script&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;根据编码函数的loss计算任务级别的快参数:
 &lt;script type=&quot;math/tex&quot;&gt;\theta^+ = F_w(\nabla_\theta \mathcal{L}^\text{emb}_1, \dots, \mathcal{L}^\text{emb}_T)&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;接下来遍历支持集 &lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt; 中的样本，计算样本级别的快参数&lt;br /&gt;
for &lt;script type=&quot;math/tex&quot;&gt;i=1, \dots, K&lt;/script&gt; :
    &lt;ul&gt;
      &lt;li&gt;a. 基学习器输出一个概率分布： &lt;script type=&quot;math/tex&quot;&gt;P(\hat{y}_i \vert \mathbf{x}_i) = g_\phi(\mathbf{x}_i)&lt;/script&gt; ，loss可以用交叉熵或者MSE: &lt;script type=&quot;math/tex&quot;&gt;\mathcal{L}^\text{task}_i = y'_i \log g_\phi(\mathbf{x}'_i) + (1- y'_i) \log (1 - g_\phi(\mathbf{x}'_i))&lt;/script&gt;&lt;/li&gt;
      &lt;li&gt;b. 提取任务的元信息（loss的梯度）并计算样本级别的快参数:
&lt;script type=&quot;math/tex&quot;&gt;\phi_i^+ = G_v(\nabla_\phi\mathcal{L}^\text{task}_i)&lt;/script&gt;
        &lt;ul&gt;
          &lt;li&gt;把 &lt;script type=&quot;math/tex&quot;&gt;\phi^+_i&lt;/script&gt; 放在“值”存储器 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{M}&lt;/script&gt; 的第 &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt; 个位置。&lt;br /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;d. 编码器结合慢参数和快参数对支持集中的样本进行编码： &lt;script type=&quot;math/tex&quot;&gt;r'_i = f_{\theta, \theta^+}(\mathbf{x}'_i)&lt;/script&gt;
        &lt;ul&gt;
          &lt;li&gt;把 &lt;script type=&quot;math/tex&quot;&gt;r'_i&lt;/script&gt; 放在“键”存储器 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{R}&lt;/script&gt; 的第 &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt; 个位置。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;最后就是要来根据测试集 &lt;script type=&quot;math/tex&quot;&gt;U=\{\mathbf{x}_i, y_i\}_{i=1}^L&lt;/script&gt; 来构建训练的loss了。注意，在这一步中，我们不使用 &lt;script type=&quot;math/tex&quot;&gt;F_w&lt;/script&gt; 和 &lt;script type=&quot;math/tex&quot;&gt;G_v&lt;/script&gt; 计算快参数。编码器的快参数保持不变，而基学习器的快参数则根据查询存储器得到。&lt;br /&gt;
从 &lt;script type=&quot;math/tex&quot;&gt;\mathcal{L}_\text{train}=0&lt;/script&gt; 开始：&lt;br /&gt;
for &lt;script type=&quot;math/tex&quot;&gt;j=1, \dots, L&lt;/script&gt; :
    &lt;ul&gt;
      &lt;li&gt;a. 使用编码器结合慢参数和之前得到的快参数对测试样例进行编码：
&lt;script type=&quot;math/tex&quot;&gt;r_j = f_{\theta, \theta^+}(\mathbf{x}_j)&lt;/script&gt;&lt;/li&gt;
      &lt;li&gt;b. 运用注意力机制，查找编码得到的 &lt;script type=&quot;math/tex&quot;&gt;r_j&lt;/script&gt; 在“键”存储器 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{R}&lt;/script&gt; 的位置，然后拿出对应位置“值”存储器 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{M}&lt;/script&gt; 对应位置的快参数，组合成当前测试样本对应的基学习器快参数。注意力函数可以随便选，MetaNet用的是cosine距离&lt;br /&gt;
  &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{aligned}
 a_j &amp;= \text{cosine}(\mathbf{R}, r_j) = [\frac{r'_1\cdot r_j}{\|r'_1\|\cdot\|r_j\|}, \dots, \frac{r'_N\cdot r_j}{\|r'_N\|\cdot\|r_j\|}]\\
 \phi^+_j &amp;= \text{softmax}(a_j)^\top \mathbf{M}
 \end{aligned} %]]&gt;&lt;/script&gt;&lt;/li&gt;
      &lt;li&gt;c. 更新训练loss： &lt;script type=&quot;math/tex&quot;&gt;\mathcal{L}_\text{train} \leftarrow \mathcal{L}_\text{train} + \mathcal{L}^\text{task}(g_{\phi, \phi^+}(\mathbf{x}_i), y_i)&lt;/script&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;根据 &lt;script type=&quot;math/tex&quot;&gt;\mathcal{L}_\text{train}&lt;/script&gt; 更新所有参数 &lt;script type=&quot;math/tex&quot;&gt;(\theta, \phi, w, v)&lt;/script&gt; .&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;基于优化的方法&quot;&gt;基于优化的方法&lt;/h2&gt;

&lt;p&gt;深度学习模型通过反向传播梯度进行学习。然后基于梯度的优化方法并不适用于仅有少量训练样本的情况，也很难在短短几步之内达到收敛。那怎样才能调整现有的优化算法使得模型能够在仅有少量样本的情况下学好呢？这就是基于优化的元学习算法的目标。&lt;/p&gt;

&lt;h3 id=&quot;lstm-meta-learner&quot;&gt;LSTM Meta-Learner&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://openreview.net/pdf?id=rJY0-Kcll&quot;&gt;Ravi &amp;amp; Larochelle (2017)&lt;/a&gt; 把优化算法显式的建模出来，并命名为“元学习器”，原本处理任务的模型被称为“学习器”。元学习器的目标是使用少量支持集在仅仅几步之内快速更新学习器的参数，使得学习器能够快速适应新任务。&lt;/p&gt;

&lt;p&gt;我们用 &lt;script type=&quot;math/tex&quot;&gt;M_\theta&lt;/script&gt; 代表参数为 &lt;script type=&quot;math/tex&quot;&gt;\theta&lt;/script&gt; 的学习器，用 &lt;script type=&quot;math/tex&quot;&gt;R_\Theta&lt;/script&gt; 代表参数为 &lt;script type=&quot;math/tex&quot;&gt;\Theta&lt;/script&gt; 的元学习器，loss函数为 &lt;script type=&quot;math/tex&quot;&gt;\mathcal{L}&lt;/script&gt; .&lt;/p&gt;

&lt;h4 id=&quot;为什么使用-lstm&quot;&gt;为什么使用 LSTM？&lt;/h4&gt;

&lt;p&gt;之所以使用 LSTM 作为元学习器的模型，有这样几点原因：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;反向传播中基于梯度的更新跟 LSTM 中 cell 状态的更新有相似之处。&lt;/li&gt;
  &lt;li&gt;知道之前的梯度对当前的梯度更新有好处。可以参考 &lt;a href=&quot;http://ruder.io/optimizing-gradient-descent/index.html#momentum&quot;&gt;momentum&lt;/a&gt; 的原理。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;第t步时，设定学习率为&lt;script type=&quot;math/tex&quot;&gt;\alpha_t&lt;/script&gt;，更新学习器的参数：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\theta_t = \theta_{t-1} - \alpha_t \nabla_{\theta_{t-1}}\mathcal{L}_t&lt;/script&gt;

&lt;p&gt;这个过程跟 LSTM 的 cell 状态更新具有相同的形式。如果我们令遗忘门 &lt;script type=&quot;math/tex&quot;&gt;f_t=1&lt;/script&gt;，输入门 &lt;script type=&quot;math/tex&quot;&gt;i_t = \alpha_t&lt;/script&gt;， cell 状态 &lt;script type=&quot;math/tex&quot;&gt;c_t = \theta_t&lt;/script&gt; , 新 cell 状态 &lt;script type=&quot;math/tex&quot;&gt;\tilde{c}_t = -\nabla_{\theta_{t-1}}\mathcal{L}_t&lt;/script&gt;，则：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
c_t &amp;= f_t \odot c_{t-1} + i_t \odot \tilde{c}_t\\
    &amp;= \theta_{t-1} - \alpha_t\nabla_{\theta_{t-1}}\mathcal{L}_t
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;p&gt;但是固定 &lt;script type=&quot;math/tex&quot;&gt;f_t=1&lt;/script&gt; 和 &lt;script type=&quot;math/tex&quot;&gt;i_t=\alpha_t&lt;/script&gt; 可能并不是最好的，我们可以让他们随数据集变化而变化，由学习得到。&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
f_t &amp;= \sigma(\mathbf{W}_f \cdot [\nabla_{\theta_{t-1}}\mathcal{L}_t, \mathcal{L}_t, \theta_{t-1}, f_{t-1}] + \mathbf{b}_f) &amp; \scriptstyle{\text{; how much to forget the old value of parameters.}}\\
i_t &amp;= \sigma(\mathbf{W}_i \cdot [\nabla_{\theta_{t-1}}\mathcal{L}_t, \mathcal{L}_t, \theta_{t-1}, i_{t-1}] + \mathbf{b}_i) &amp; \scriptstyle{\text{; corresponding to the learning rate at time step t.}}\\
\tilde{\theta}_t &amp;= -\nabla_{\theta_{t-1}}\mathcal{L}_t &amp;\\
\theta_t &amp;= f_t \odot \theta_{t-1} + i_t \odot \tilde{\theta}_t &amp;\\
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;h4 id=&quot;model-setup&quot;&gt;Model Setup&lt;/h4&gt;

&lt;p style=&quot;width: 100%;&quot; class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/images/2019-09-19-meta-learning/lstm-meta-learner.png&quot; alt=&quot;lstm-meta-learner&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig.10. 如何训练学习器 &lt;script type=&quot;math/tex&quot;&gt;M_\theta&lt;/script&gt; 和元学习器 &lt;script type=&quot;math/tex&quot;&gt;R_\Theta&lt;/script&gt;. (图像来源：&lt;a href=&quot;https://openreview.net/pdf?id=rJY0-Kcll&quot;&gt;原论文&lt;/a&gt;中的图片加了一些注释)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;在&lt;a href=&quot;#matching-networks&quot;&gt;Matching Networks&lt;/a&gt;中我们已经证明了用模仿测试过程的方式训练能够取得很好的效果，这里也用了类似的方法。在每个训练阶段，我们先采样一个数据集 &lt;script type=&quot;math/tex&quot;&gt;\mathcal{D} = (\mathcal{D}_\text{train}, \mathcal{D}_\text{test}) \in \hat{\mathcal{D}}_\text{meta-train}&lt;/script&gt;，再从 &lt;script type=&quot;math/tex&quot;&gt;\mathcal{D}_\text{train}&lt;/script&gt; 中采样 &lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt; 轮 mini-batches 用于更新 &lt;script type=&quot;math/tex&quot;&gt;\theta&lt;/script&gt;。学习器参数的最终状态&lt;script type=&quot;math/tex&quot;&gt;\theta_T&lt;/script&gt;被用来在测试数据 &lt;script type=&quot;math/tex&quot;&gt;\mathcal{D}_\text{test}&lt;/script&gt; 上训练元学习器。&lt;/p&gt;

&lt;p&gt;有两个实现的细节需要注意一下：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;如何压缩 LSTM 元学习的参数空间？元学习器是在建模一个神经网络的参数，所以有上百万个变量要学。为了减小元学习器的参数空间，这篇文章借鉴了&lt;a href=&quot;https://arxiv.org/abs/1606.04474&quot;&gt;共享参数&lt;/a&gt;的方法。元学习器本质上学习的是一种更新原则，即如何根据一个参数的值和其梯度生成这个参数的新值（比如一阶方法，牛顿法等），与参数在学习器中的位置无关。所以我们可以假设所有参数的更新原则都是一样的，即元学习只需要输出一维变量即可。&lt;/li&gt;
  &lt;li&gt;为了简化训练过程，元学习器假设 loss &lt;script type=&quot;math/tex&quot;&gt;\mathcal{L}_t&lt;/script&gt; 和梯度 &lt;script type=&quot;math/tex&quot;&gt;\nabla_{\theta_{t-1}} \mathcal{L}_t&lt;/script&gt; 是独立的。&lt;/li&gt;
&lt;/ol&gt;

&lt;p style=&quot;width: 100%;&quot; class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/images/2019-09-19-meta-learning/train-meta-learner.png&quot; alt=&quot;train-meta-learner&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;maml&quot;&gt;MAML&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Model-Agnostic Meta-Learning&lt;/strong&gt; 简称 &lt;strong&gt;MAML&lt;/strong&gt; (&lt;a href=&quot;https://arxiv.org/abs/1703.03400&quot;&gt;Finn, et al. 2017&lt;/a&gt;)， 是一种非常通用的优化算法，可以被用于任何基于梯度下降学习的模型。&lt;/p&gt;

&lt;p&gt;假设我们的模型是 &lt;script type=&quot;math/tex&quot;&gt;f_\theta&lt;/script&gt;，参数为 &lt;script type=&quot;math/tex&quot;&gt;\theta&lt;/script&gt;。给定一个任务 &lt;script type=&quot;math/tex&quot;&gt;\tau_i&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;假设我们的模型是 &lt;script type=&quot;math/tex&quot;&gt;f_\theta&lt;/script&gt;，参数为 &lt;script type=&quot;math/tex&quot;&gt;\theta&lt;/script&gt;。给定一个任务 &lt;script type=&quot;math/tex&quot;&gt;\tau_i&lt;/script&gt; 和其相应的数据集 &lt;script type=&quot;math/tex&quot;&gt;(\mathcal{D}^{(i)}_\text{train}, \mathcal{D}^{(i)}_\text{test})&lt;/script&gt;，我们可以对模型参数进行一次或多次梯度下降。（下式中只进行了一次迭代）：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\theta'_i = \theta - \alpha \nabla_\theta\mathcal{L}^{(0)}_{\tau_i}(f_\theta)&lt;/script&gt;

&lt;p&gt;其中 &lt;script type=&quot;math/tex&quot;&gt;\mathcal{L}^{(0)}&lt;/script&gt; 是由编号为0的小数据batch算得的loss。&lt;/p&gt;

&lt;p style=&quot;width: 45%;&quot; class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/images/2019-09-19-meta-learning/maml.png&quot; alt=&quot;MAML&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig. 11. MAML图示。 (图像来源：&lt;a href=&quot;https://arxiv.org/abs/1703.03400&quot;&gt;原论文&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;当然，上面这个式子只针对一个特定的任务进行了优化。而MAML为了能够更好地扩展到一系列任务上，我们想要寻找一个在给定任意任务后&lt;strong&gt;微调过程最高效&lt;/strong&gt;的 &lt;script type=&quot;math/tex&quot;&gt;\theta^*&lt;/script&gt;。现在，假设我们采样了一个编号为1的数据batch用于更新元目标。对应的loss记为 &lt;script type=&quot;math/tex&quot;&gt;\mathcal{L}^{(1)}&lt;/script&gt;。&lt;script type=&quot;math/tex&quot;&gt;\mathcal{L}^{(0)}&lt;/script&gt; 和 &lt;script type=&quot;math/tex&quot;&gt;\mathcal{L}^{(1)}&lt;/script&gt;的上标只代表着数据batch不同，他们都是同一个目标方程计算得到的。那么&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
\theta^* 
&amp;= \arg\min_\theta \sum_{\tau_i \sim p(\tau)} \mathcal{L}_{\tau_i}^{(1)} (f_{\theta'_i}) = \arg\min_\theta \sum_{\tau_i \sim p(\tau)} \mathcal{L}_{\tau_i}^{(1)} (f_{\theta - \alpha\nabla_\theta \mathcal{L}_{\tau_i}^{(0)}(f_\theta)}) &amp; \\
\theta &amp;\leftarrow \theta - \beta \nabla_{\theta} \sum_{\tau_i \sim p(\tau)} \mathcal{L}_{\tau_i}^{(1)} (f_{\theta - \alpha\nabla_\theta \mathcal{L}_{\tau_i}^{(0)}(f_\theta)}) &amp; \scriptstyle{\text{; updating rule}}
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;p style=&quot;width: 60%;&quot; class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/images/2019-09-19-meta-learning/maml-algo.png&quot; alt=&quot;MAML Algorithm&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig. 12. MAML算法的一般形式。 (图像来源：&lt;a href=&quot;https://arxiv.org/abs/1703.03400&quot;&gt;原论文&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;first-order-maml&quot;&gt;First-Order MAML&lt;/h4&gt;

&lt;p&gt;上面的元优化过程依赖于二阶导数（多次迭代）。而为了加快计算，简化实现过程，一个忽略了二阶项的简化版MAML被提出了，称为 &lt;strong&gt;First-Order MAML (FOMAML)&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;让我们来考虑一下执行 &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; 次内循环（微调过程）梯度下降的过程（&lt;script type=&quot;math/tex&quot;&gt;k\geq1&lt;/script&gt;）。假设一开始的模型参数为 &lt;script type=&quot;math/tex&quot;&gt;\theta_\text{meta}&lt;/script&gt; ：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
\theta_0 &amp;= \theta_\text{meta}\\
\theta_1 &amp;= \theta_0 - \alpha\nabla_\theta\mathcal{L}^{(0)}(\theta_0)\\
\theta_2 &amp;= \theta_1 - \alpha\nabla_\theta\mathcal{L}^{(0)}(\theta_1)\\
&amp;\dots\\
\theta_k &amp;= \theta_{k-1} - \alpha\nabla_\theta\mathcal{L}^{(0)}(\theta_{k-1})
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;p&gt;而在外循环中，我们采样一个新的数据batch用于更新元目标。&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
\theta_\text{meta} &amp;\leftarrow \theta_\text{meta} - \beta g_\text{MAML} &amp; \scriptstyle{\text{; update for meta-objective}} \\[2mm]
\text{其中 } g_\text{MAML}
&amp;= \nabla_{\theta} \mathcal{L}^{(1)}(\theta_k) &amp;\\[2mm]
&amp;= \nabla_{\theta_k} \mathcal{L}^{(1)}(\theta_k) \cdot (\nabla_{\theta_{k-1}} \theta_k) \dots (\nabla_{\theta_0} \theta_1) \cdot (\nabla_{\theta} \theta_0) &amp; \scriptstyle{\text{; following the chain rule}} \\
&amp;= \nabla_{\theta_k} \mathcal{L}^{(1)}(\theta_k) \cdot \prod_{i=1}^k \nabla_{\theta_{i-1}} \theta_i &amp;  \\
&amp;= \nabla_{\theta_k} \mathcal{L}^{(1)}(\theta_k) \cdot \prod_{i=1}^k \nabla_{\theta_{i-1}} (\theta_{i-1} - \alpha\nabla_\theta\mathcal{L}^{(0)}(\theta_{i-1})) &amp;  \\
&amp;= \nabla_{\theta_k} \mathcal{L}^{(1)}(\theta_k) \cdot \prod_{i=1}^k (I - \alpha\nabla_{\theta_{i-1}}(\nabla_\theta\mathcal{L}^{(0)}(\theta_{i-1}))) &amp;
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;p&gt;MAML的梯度是：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;g_\text{MAML} = \nabla_{\theta_k} \mathcal{L}^{(1)}(\theta_k) \cdot \prod_{i=1}^k (I - \alpha \color{red}{\nabla_{\theta_{i-1}}(\nabla_\theta\mathcal{L}^{(0)}(\theta_{i-1}))})&lt;/script&gt;

&lt;p&gt;一阶 MAML 忽略了用红色标记的二阶导数部分。它被简化为了下式，等价于最后一次内循环梯度更新的结果。&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;g_\text{FOMAML} = \nabla_{\theta_k} \mathcal{L}^{(1)}(\theta_k)&lt;/script&gt;

&lt;h3 id=&quot;reptile&quot;&gt;Reptile&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Reptile&lt;/strong&gt; (&lt;a href=&quot;https://arxiv.org/abs/1803.02999&quot;&gt;Nichol, Achiam &amp;amp; Schulman, 2018&lt;/a&gt;) 是一个超级简单的元学习优化算法。它跟 MAML 类似，它们都靠梯度下降进行元优化，而且都是模型无关的算法。&lt;/p&gt;

&lt;p&gt;Reptiled 的执行流程如下:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;1) 采样一个任务,&lt;/li&gt;
  &lt;li&gt;2) 在这个任务上进行多次梯度下降&lt;/li&gt;
  &lt;li&gt;3) 把模型参数向新参数靠近&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如下图中算法所示：
 给定初始参数 &lt;script type=&quot;math/tex&quot;&gt;\theta&lt;/script&gt;，&lt;script type=&quot;math/tex&quot;&gt;\text{SGD}(\mathcal{L}_{\tau_i}, \theta, k)&lt;/script&gt; 根据 loss &lt;script type=&quot;math/tex&quot;&gt;\mathcal{L}_{\tau_i}&lt;/script&gt; 进行 $k$ 次随机梯度下降，之后返回参数向量。带batch的版本则每次采样多个任务。Reptile的梯度定义为 &lt;script type=&quot;math/tex&quot;&gt;(\theta - W)/\alpha&lt;/script&gt;，其中 &lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt; 是 SGD 所使用的步长。&lt;/p&gt;

&lt;p style=&quot;width: 52%;&quot; class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/images/2019-09-19-meta-learning/reptile-algo.png&quot; alt=&quot;Reptile Algorithm&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig. 13. Batch 版本的 Reptile 算法. (图像来源：&lt;a href=&quot;https://arxiv.org/abs/1803.02999&quot;&gt;原论文&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;一眼看上去，这个算法跟普通的 SGD 很像。但是，因为内循环里的梯度下降可以发生好多次，使得 &lt;script type=&quot;math/tex&quot;&gt;\text{SGD}(\mathbb{E}
_\tau[\mathcal{L}_{\tau}], \theta, k)&lt;/script&gt; 与 &lt;script type=&quot;math/tex&quot;&gt;\mathbb{E}_\tau [\text{SGD}(\mathcal{L}_{\tau}, \theta, k)]&lt;/script&gt; 在 k &amp;gt; 1 时产生了区别。&lt;/p&gt;

&lt;h4 id=&quot;the-optimization-assumption&quot;&gt;The Optimization Assumption&lt;/h4&gt;

&lt;p&gt;假设任务 &lt;script type=&quot;math/tex&quot;&gt;\tau \sim p(\tau)&lt;/script&gt; 有一个最优的模型参数空间构成的流形 &lt;script type=&quot;math/tex&quot;&gt;\mathcal{W}_{\tau}^*&lt;/script&gt; 。 当参数 &lt;script type=&quot;math/tex&quot;&gt;\theta&lt;/script&gt; 处于这个流形 &lt;script type=&quot;math/tex&quot;&gt;\mathcal{W}_{\tau}^*&lt;/script&gt; 上面的时候，模型 &lt;script type=&quot;math/tex&quot;&gt;f_\theta&lt;/script&gt; 能够在任务 &lt;script type=&quot;math/tex&quot;&gt;\tau&lt;/script&gt; 上达到最好的效果。为了找到一个对于所有任务都足够好的模型，我们想要找一个靠近所有任务的最优流形的参数，即：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\theta^* = \arg\min_\theta \mathbb{E}_{\tau \sim p(\tau)} [\frac{1}{2} \text{dist}(\theta, \mathcal{W}_\tau^*)^2]&lt;/script&gt;

&lt;p style=&quot;width: 50%;&quot; class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/images/2019-09-19-meta-learning/reptile-optim.png&quot; alt=&quot;Reptile Algorithm&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig. 14. 为了靠近不同任务的最优流形，Reptile 算法在交替更新参数。 (图像来源：&lt;a href=&quot;https://arxiv.org/abs/1803.02999&quot;&gt;原论文&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;我们设 &lt;script type=&quot;math/tex&quot;&gt;\text{dist}(.)&lt;/script&gt; 为 L2 距离，并定义一个点 &lt;script type=&quot;math/tex&quot;&gt;\theta&lt;/script&gt; 和一个集合 &lt;script type=&quot;math/tex&quot;&gt;\mathcal{W}_\tau^*&lt;/script&gt; 之间的距离等价于 &lt;script type=&quot;math/tex&quot;&gt;\theta&lt;/script&gt; 和一个该流形上最接近 &lt;script type=&quot;math/tex&quot;&gt;\theta&lt;/script&gt; 的点 &lt;script type=&quot;math/tex&quot;&gt;W_{\tau}^*(\theta)&lt;/script&gt; 的距离。&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\text{dist}(\theta, \mathcal{W}_{\tau}^*) = \text{dist}(\theta, W_{\tau}^*(\theta)) \text{, where }W_{\tau}^*(\theta) = \arg\min_{W\in\mathcal{W}_{\tau}^*} \text{dist}(\theta, W)&lt;/script&gt;

&lt;p&gt;欧拉距离平方的梯度为：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
\nabla_\theta[\frac{1}{2}\text{dist}(\theta, \mathcal{W}_{\tau_i}^*)^2]
&amp;= \nabla_\theta[\frac{1}{2}\text{dist}(\theta, W_{\tau_i}^*(\theta))^2] &amp; \\
&amp;= \nabla_\theta[\frac{1}{2}(\theta - W_{\tau_i}^*(\theta))^2] &amp; \\
&amp;= \theta - W_{\tau_i}^*(\theta) &amp; \scriptstyle{\text{; See notes.}}
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;p&gt;注意：根据原论文，“&lt;em&gt;一个点 Θ 和一个集合 S 的欧拉距离平方的梯度为 2(Θ − p)，其中 p 是 S 中离 Θ 最近的点&lt;/em&gt;“。理论上来说，S 中最靠近 Θ 的点应该也是一个 Θ 的函数，但我不确定为什么计算梯度的时候不需要担心 p 的导数。(如果有什么想法欢迎讨论。)&lt;/p&gt;

&lt;p&gt;因此，一个随机梯度下降的更新步骤为：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\theta = \theta - \alpha \nabla_\theta[\frac{1}{2} \text{dist}(\theta, \mathcal{W}_{\tau_i}^*)^2] = \theta - \alpha(\theta - W_{\tau_i}^*(\theta)) = (1-\alpha)\theta + \alpha W_{\tau_i}^*(\theta)&lt;/script&gt;

&lt;p&gt;虽然很难精确计算出任务最优流形上的最近点 &lt;script type=&quot;math/tex&quot;&gt;W_{\tau_i}^*(\theta)&lt;/script&gt; ，但Reptile 可以根据 &lt;script type=&quot;math/tex&quot;&gt;\text{SGD}(\mathcal{L}_\tau, \theta, k)&lt;/script&gt; 拟合出来。&lt;/p&gt;

&lt;h4 id=&quot;reptile-vs-fomaml&quot;&gt;Reptile vs FOMAML&lt;/h4&gt;

&lt;p&gt;为了说明 Reptile 和 MAML 的深层联系，我们用一个做了两步梯度下降的更新公式做例子，即 &lt;script type=&quot;math/tex&quot;&gt;\text{SGD}(.)&lt;/script&gt; 中 k=2。 和&lt;a href=&quot;#maml&quot;&gt;上面&lt;/a&gt;定义的一样，&lt;script type=&quot;math/tex&quot;&gt;\mathcal{L}^{(0)}&lt;/script&gt; 和 &lt;script type=&quot;math/tex&quot;&gt;\mathcal{L}^{(1)}&lt;/script&gt; 只是不太batch对应的loss。为了方便阅读，我们使用两个记号：&lt;script type=&quot;math/tex&quot;&gt;g^{(i)}_j = \nabla_{\theta} \mathcal{L}^{(i)}(\theta_j)&lt;/script&gt; 和 &lt;script type=&quot;math/tex&quot;&gt;H^{(i)}_j = \nabla^2_{\theta} \mathcal{L}^{(i)}(\theta_j)&lt;/script&gt;。&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
\theta_0 &amp;= \theta_\text{meta}\\
\theta_1 &amp;= \theta_0 - \alpha\nabla_\theta\mathcal{L}^{(0)}(\theta_0)= \theta_0 - \alpha g^{(0)}_0 \\
\theta_2 &amp;= \theta_1 - \alpha\nabla_\theta\mathcal{L}^{(1)}(\theta_1) = \theta_0 - \alpha g^{(0)}_0 - \alpha g^{(1)}_1
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;p&gt;如&lt;a href=&quot;#first-order-maml&quot;&gt;前面章节&lt;/a&gt;所述，FOMAML 的梯度是最后一次内循环梯度更新的结果。因此，当 k=1 时：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
g_\text{FOMAML} &amp;= \nabla_{\theta_1} \mathcal{L}^{(1)}(\theta_1) = g^{(1)}_1 \\
g_\text{MAML} &amp;= \nabla_{\theta_1} \mathcal{L}^{(1)}(\theta_1) \cdot (I - \alpha\nabla^2_{\theta} \mathcal{L}^{(0)}(\theta_0)) = g^{(1)}_1 - \alpha H^{(0)}_0 g^{(1)}_1
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;p&gt;Reptile的梯度则定义为：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;g_\text{Reptile} = (\theta_0 - \theta_2) / \alpha = g^{(0)}_0 + g^{(1)}_1&lt;/script&gt;

&lt;p&gt;现在，我们可以得到：&lt;/p&gt;

&lt;p style=&quot;width: 50%;&quot; class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/images/2019-09-19-meta-learning/reptile_vs_FOMAML.png&quot; alt=&quot;Reptile vs FOMAML&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig. 15. Reptile 和 FOMAML 在一次外循环里的元优化方式对比. (图像来源：&lt;a href=&quot;https://www.slideshare.net/YoonhoLee4/on-firstorder-metalearning-algorithms&quot;&gt;slides&lt;/a&gt; on Reptile by Yoonho Lee.)&lt;/em&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
g_\text{FOMAML} &amp;= g^{(1)}_1 \\
g_\text{MAML} &amp;= g^{(1)}_1 - \alpha H^{(0)}_0 g^{(1)}_1 \\
g_\text{Reptile} &amp;= g^{(0)}_0 + g^{(1)}_1
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;p&gt;接下来，我们对 &lt;script type=&quot;math/tex&quot;&gt;g^{(1)}_1&lt;/script&gt; 使用 &lt;a href=&quot;https://en.wikipedia.org/wiki/Taylor_series&quot;&gt;泰勒展开&lt;/a&gt;。对一个可微函数 &lt;script type=&quot;math/tex&quot;&gt;f(x)&lt;/script&gt; 进行 &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; 阶展开的式子为：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(x) = f(a) + \frac{f'(a)}{1!}(x-a) + \frac{f''(a)}{2!}(x-a)^2 + \dots = \sum_{i=0}^\infty \frac{f^{(i)}(a)}{i!}(x-a)^i&lt;/script&gt;

&lt;p&gt;我们把 &lt;script type=&quot;math/tex&quot;&gt;\nabla_{\theta}\mathcal{L}^{(1)}(.)&lt;/script&gt; 看做一个函数，把 &lt;script type=&quot;math/tex&quot;&gt;\theta_0&lt;/script&gt; 看做自变量。 &lt;script type=&quot;math/tex&quot;&gt;g_1^{(1)}&lt;/script&gt; 在 &lt;script type=&quot;math/tex&quot;&gt;\theta_0&lt;/script&gt; 处的泰勒展开为：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
g_1^{(1)} &amp;= \nabla_{\theta}\mathcal{L}^{(1)}(\theta_1) \\
&amp;= \nabla_{\theta}\mathcal{L}^{(1)}(\theta_0) + \nabla^2_\theta\mathcal{L}^{(1)}(\theta_0)(\theta_1 - \theta_0) + \frac{1}{2}\nabla^3_\theta\mathcal{L}^{(1)}(\theta_0)(\theta_1 - \theta_0)^2 + \dots &amp; \\
&amp;= g_0^{(1)} - \alpha H^{(1)}_0 g_0^{(0)} + \frac{\alpha^2}{2}\nabla^3_\theta\mathcal{L}^{(1)}(\theta_0) (g_0^{(0)})^2 + \dots &amp; \scriptstyle{\text{; because }\theta_1-\theta_0=-\alpha g_0^{(0)}} \\
&amp;= g_0^{(1)} - \alpha H^{(1)}_0 g_0^{(0)} + O(\alpha^2)
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;p&gt;把 MAML 的一步内循环梯度更新用 &lt;script type=&quot;math/tex&quot;&gt;g_1^{(1)}&lt;/script&gt; 的展开式重写：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
g_\text{FOMAML} &amp;= g^{(1)}_1 = g_0^{(1)} - \alpha H^{(1)}_0 g_0^{(0)} + O(\alpha^2)\\
g_\text{MAML} &amp;= g^{(1)}_1 - \alpha H^{(0)}_0 g^{(1)}_1 \\
&amp;= g_0^{(1)} - \alpha H^{(1)}_0 g_0^{(0)} + O(\alpha^2) - \alpha H^{(0)}_0 (g_0^{(1)} - \alpha H^{(1)}_0 g_0^{(0)} + O(\alpha^2))\\
&amp;= g_0^{(1)} - \alpha H^{(1)}_0 g_0^{(0)} - \alpha H^{(0)}_0 g_0^{(1)} + \alpha^2 \alpha H^{(0)}_0 H^{(1)}_0 g_0^{(0)} + O(\alpha^2)\\
&amp;= g_0^{(1)} - \alpha H^{(1)}_0 g_0^{(0)} - \alpha H^{(0)}_0 g_0^{(1)} + O(\alpha^2)
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;p&gt;Reptile的梯度变为：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
g_\text{Reptile} 
&amp;= g^{(0)}_0 + g^{(1)}_1 \\
&amp;= g^{(0)}_0 + g_0^{(1)} - \alpha H^{(1)}_0 g_0^{(0)} + O(\alpha^2)
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;p&gt;现在，我们有了三种不同的梯度更新法则：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
g_\text{FOMAML} &amp;= g_0^{(1)} - \alpha H^{(1)}_0 g_0^{(0)} + O(\alpha^2)\\
g_\text{MAML} &amp;= g_0^{(1)} - \alpha H^{(1)}_0 g_0^{(0)} - \alpha H^{(0)}_0 g_0^{(1)} + O(\alpha^2)\\
g_\text{Reptile}  &amp;= g^{(0)}_0 + g_0^{(1)} - \alpha H^{(1)}_0 g_0^{(0)} + O(\alpha^2)
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;p&gt;在训练过程中，我们经常会对多个数据batch做平均。在我们的例子中，小batch (0) 和 (1)是可交换的， 因为他们都是随机选取的。期望 &lt;script type=&quot;math/tex&quot;&gt;\mathbb{E}_{\tau,0,1}&lt;/script&gt; 表示在任务&lt;script type=&quot;math/tex&quot;&gt;\tau&lt;/script&gt;上，两个标号为 (0) 和 (1) 的数据batch的平均值。&lt;/p&gt;

&lt;p&gt;令,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;A = \mathbb{E}_{\tau,0,1} [g_0^{(0)}] = \mathbb{E}_{\tau,0,1} [g_0^{(1)}]&lt;/script&gt; ; 代表着任务loss的平均梯度。沿着 &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; 代表的方向更新模型，能够使模型在当前任务上的表现更好。&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;B = \mathbb{E}_{\tau,0,1} [H^{(1)}_0 g_0^{(0)}] = \frac{1}{2}\mathbb{E}_{\tau,0,1} [H^{(1)}_0 g_0^{(0)} + H^{(0)}_0 g_0^{(1)}] = \frac{1}{2}\mathbb{E}_{\tau,0,1} [\nabla_\theta(g^{(0)}_0 g_0^{(1)})]&lt;/script&gt; ; 代表着增加同个任务上两个小batch梯度的内积的方向。沿着 &lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt; 代表的方向更新模型，能够使得模型在当前任务上具有更好的泛化性。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;综上所述， MAML 和 Reptile 的优化目标相同，都是更好的任务表现（由 A 主导）和更好的泛化能力（由 B 主导）。当梯度更新由泰勒展开的前三项近似时：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
\mathbb{E}_{\tau,1,2}[g_\text{FOMAML}] &amp;= A - \alpha B + O(\alpha^2)\\
\mathbb{E}_{\tau,1,2}[g_\text{MAML}] &amp;= A - 2\alpha B + O(\alpha^2)\\
\mathbb{E}_{\tau,1,2}[g_\text{Reptile}]  &amp;= 2A - \alpha B + O(\alpha^2)
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;p&gt;虽然我们没法确定忽略的 &lt;script type=&quot;math/tex&quot;&gt;O(\alpha^2)&lt;/script&gt; 项是否对于参数更新有着重要作用。但根据 FOMAML 与 MAML 的表现相近来看，说高阶导数对于梯度更新不太重要还是比较靠谱的。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;引用本文:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@article{weng2018metalearning,
  title   = &quot;Meta-Learning: Learning to Learn Fast&quot;,
  author  = &quot;Weng, Lilian&quot;,
  journal = &quot;lilianweng.github.io/lil-log&quot;,
  year    = &quot;2018&quot;,
  url     = &quot;http://lilianweng.github.io/lil-log/2018/11/29/meta-learning.html&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;如果你发现本文章有错误，欢迎联系作者（lilian dot wengweng at gmail dot com）或译者（phi.wth at gmail dot com）。非常感谢！&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;敬请期待更多文章！&lt;/p&gt;

&lt;h2 id=&quot;引用&quot;&gt;引用&lt;/h2&gt;

&lt;p&gt;[1] Brenden M. Lake, Ruslan Salakhutdinov, and Joshua B. Tenenbaum. &lt;a href=&quot;https://www.cs.cmu.edu/~rsalakhu/papers/LakeEtAl2015Science.pdf&quot;&gt;“Human-level concept learning through probabilistic program induction.”&lt;/a&gt; Science 350.6266 (2015): 1332-1338.&lt;/p&gt;

&lt;p&gt;[2] Oriol Vinyals’ talk on &lt;a href=&quot;http://metalearning-symposium.ml/files/vinyals.pdf&quot;&gt;“Model vs Optimization Meta Learning”&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[3] Gregory Koch, Richard Zemel, and Ruslan Salakhutdinov. &lt;a href=&quot;http://www.cs.toronto.edu/~rsalakhu/papers/oneshot1.pdf&quot;&gt;“Siamese neural networks for one-shot image recognition.”&lt;/a&gt; ICML Deep Learning Workshop. 2015.&lt;/p&gt;

&lt;p&gt;[4] Oriol Vinyals, et al. &lt;a href=&quot;http://papers.nips.cc/paper/6385-matching-networks-for-one-shot-learning.pdf&quot;&gt;“Matching networks for one shot learning.”&lt;/a&gt; NIPS. 2016.&lt;/p&gt;

&lt;p&gt;[5] Flood Sung, et al. &lt;a href=&quot;http://openaccess.thecvf.com/content_cvpr_2018/papers_backup/Sung_Learning_to_Compare_CVPR_2018_paper.pdf&quot;&gt;“Learning to compare: Relation network for few-shot learning.”&lt;/a&gt; CVPR. 2018.&lt;/p&gt;

&lt;p&gt;[6] Jake Snell, Kevin Swersky, and Richard Zemel. &lt;a href=&quot;http://papers.nips.cc/paper/6996-prototypical-networks-for-few-shot-learning.pdf&quot;&gt;“Prototypical Networks for Few-shot Learning.”&lt;/a&gt; CVPR. 2018.&lt;/p&gt;

&lt;p&gt;[7] Adam Santoro, et al. &lt;a href=&quot;http://proceedings.mlr.press/v48/santoro16.pdf&quot;&gt;“Meta-learning with memory-augmented neural networks.”&lt;/a&gt; ICML. 2016.&lt;/p&gt;

&lt;p&gt;[8] Alex Graves, Greg Wayne, and Ivo Danihelka. &lt;a href=&quot;https://arxiv.org/abs/1410.5401&quot;&gt;“Neural turing machines.”&lt;/a&gt; arXiv preprint arXiv:1410.5401 (2014).&lt;/p&gt;

&lt;p&gt;[9] Tsendsuren Munkhdalai and Hong Yu. &lt;a href=&quot;https://arxiv.org/abs/1703.00837&quot;&gt;“Meta Networks.”&lt;/a&gt; ICML. 2017.&lt;/p&gt;

&lt;p&gt;[10] Sachin Ravi and Hugo Larochelle. &lt;a href=&quot;https://openreview.net/pdf?id=rJY0-Kcll&quot;&gt;“Optimization as a Model for Few-Shot Learning.”&lt;/a&gt; ICLR. 2017.&lt;/p&gt;

&lt;p&gt;[11] Chelsea Finn’s BAIR blog on &lt;a href=&quot;https://bair.berkeley.edu/blog/2017/07/18/learning-to-learn/&quot;&gt;“Learning to Learn”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[12] Chelsea Finn, Pieter Abbeel, and Sergey Levine. &lt;a href=&quot;https://arxiv.org/abs/1703.03400&quot;&gt;“Model-agnostic meta-learning for fast adaptation of deep networks.”&lt;/a&gt; ICML 2017.&lt;/p&gt;

&lt;p&gt;[13] Alex Nichol, Joshua Achiam, John Schulman. &lt;a href=&quot;https://arxiv.org/abs/1803.02999&quot;&gt;“On First-Order Meta-Learning Algorithms.”&lt;/a&gt; arXiv preprint arXiv:1803.02999 (2018).&lt;/p&gt;

&lt;p&gt;[14] &lt;a href=&quot;https://www.slideshare.net/YoonhoLee4/on-firstorder-metalearning-algorithms&quot;&gt;Slides on Reptile&lt;/a&gt; by Yoonho Lee.&lt;/p&gt;</content><author><name>Tianhao Wei</name></author><category term="meta-learning" /><category term="long-read" /><summary type="html">学习如何学习的方法被称为元学习。元学习的目标是在接触到没见过的任务或者迁移到新环境中时，可以根据之前的经验和少量的样本快速学习如何应对。元学习有三种常见的实现方法：1）学习有效的距离度量方式（基于度量的方法）；2）使用带有显式或隐式记忆储存的（循环）神经网络（基于模型的方法）；3）训练以快速学习为目标的模型（基于优化的方法）</summary></entry></feed>